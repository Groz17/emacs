#+TITLE: Groz's GNU Emacs Config
#+AUTHOR: Groz
#+DESCRIPTION: Groz's personal Emacs config
#+STARTUP: overview
#+OPTIONS: toc:2
#+property: header-args :tangle ~/.config/emacs/init.el

Sync toc? Like modify here and reflect changes and viceversa
https://github.com/darcamo/simple_emacs_config/blob/80e54c61e3b0f750403ff0ef9aa4b0e3b2201c31/config.org#L8158

* TABLE OF CONTENTS :toc:
- [[#task-list][TASK LIST]]
  - [[#vim-feature-parity-16-16][Vim feature parity]]
  - [[#emacs-662-9][Emacs]]
  - [[#emacsvim-interaction-evil-mode][Emacs/vim interaction (Evil Mode)]]
- [[#universal-argument][Universal argument]]
- [[#authinfo][Authinfo]]
- [[#transparency][TRANSPARENCY]]
- [[#minibuffer][MINIBUFFER]]
  -  [[#escape][ESCAPE]]
  -  [[#readline-sanity][READLINE SANITY]]
- [[#fonts][FONTS]]
  - [[#setting-the-font-face][Setting the Font Face]]
- [[#keybindings][Keybindings]]
- [[#making-deleted-files-go-to-trash-can][Making deleted files go to trash can]]
- [[#important-programs-to-load-first][IMPORTANT PROGRAMS TO LOAD FIRST]]
  - [[#adding-the-scripts-directory-to-path][Adding the scripts directory to path]]
  - [[#sourcing-the-scripts][Sourcing the scripts]]
- [[#sane-defaults][SANE DEFAULTS]]
  - [[#prettier-vertical-window-divider-in-terminal][Prettier vertical window divider in terminal]]
- [[#personal-information][Personal information]]
- [[#multilingual-editing][MULTILINGUAL EDITING]]
- [[#vim-parity][VIM PARITY]]
- [[#backup][BACKUP]]
- [[#plugins][Plugins]]
  - [[#all-the-icons][ALL THE ICONS]]
  - [[#company][COMPANY]]
  - [[#dashboard][DASHBOARD]]
  - [[#diminish][DIMINISH]]
  - [[#dired][DIRED]]
  - [[#ediff][EDIFF]]
  - [[#elfeed][ELFEED]]
  - [[#evil][EVIL]]
  - [[#flycheck][FLYCHECK]]
  - [[#general-keybindings][GENERAL KEYBINDINGS]]
  - [[#git][GIT]]
  - [[#highlight-todo][HIGHLIGHT TODO]]
  - [[#ivy-counsel][IVY (COUNSEL)]]
  - [[#language-support][LANGUAGE SUPPORT]]
  - [[#modeline][MODELINE]]
  - [[#org-mode][ORG MODE]]
  - [[#pdfs][PDFs]]
  - [[#epubs][EPUBs]]
  - [[#rainbow-delimiters][RAINBOW DELIMITERS]]
  - [[#rainbow-mode][RAINBOW MODE]]
  - [[#subword-mode][SUBWORD MODE]]
  - [[#shells-and-terminals][SHELLS AND TERMINALS]]
  - [[#sudo-edit][SUDO EDIT]]
  - [[#theme][THEME]]
  - [[#tldr][TLDR]]
  - [[#which-key][WHICH-KEY]]
  - [[#command-log][COMMAND-LOG]]
  - [[#kanata-sheganigans][KANATA SHEGANIGANS]]
  - [[#noice][NOICE]]
  - [[#helpful][HELPFUL]]
  - [[#hydra][HYDRA]]
  - [[#lispy][LISPY]]
  - [[#erc][ERC]]
  - [[#quiz][QUIZ]]
  - [[#themes][THEMES]]
  - [[#docs][DOCS]]
  - [[#anki-editor][anki editor]]
  - [[#notes][notes?]]
  - [[#radio][Radio]]
  - [[#info][info]]
  - [[#docker][docker]]
  - [[#ai][AI]]
  - [[#eof][EOF]]
  - [[#lsp][LSP]]
  - [[#tree-sitter][Tree-sitter]]
  - [[#socials][Socials]]
  - [[#snippets][Snippets]]
  - [[#password-management][Password management]]
  - [[#music][Music]]
  - [[#stt][STT]]
  - [[#info-1][Info]]
  - [[#translation][Translation]]
  - [[#pages][Pages]]
  - [[#symex][symex]]
  - [[#prism][Prism]]
  - [[#gnuplot][Gnuplot]]
  - [[#gists][Gists]]

* TODO TASK LIST
** Vim feature parity [1/6] [16%]
- [ ] gf shows popup for some reason
- [ ] v:count tab doesn't work in org mode tables? also how to make column same width?
- [ ] lazy ui for slowest plugins?
- [X] C-j indents, C-m doesn't

** Emacs [6/62] [9%]
- [ ] https://github.com/MArpogaus/auto-tab-groups
- [ ] emacs terminal show title
- [ ] emacs can i change directory for the Next command
- [ ] emacs keybindings in /? (searching)
- [ ] git@github.com:ag91/moldable-emacs.git"))
- [ ] https://github.com/tarsius/keychain-environment/blob/main/keychain-environment.el#L27-L48
- [ ] rooter? autochdir?
- [X] automatically focus split on mouse
- [ ] HOOKS # when exiting emacs open terminal?
- [ ] dotfiles dirs in projects/bookmarks?
- [ ] tangle only part of file that was modified (diff), especially not touched files
- [ ] kill shell buffer with C-d if first char?
- [ ] https://github.com/SqrtMinusOne/pomm.el?tab=readme-ov-file
- [ ] emmet?
- [ ] olivetti mode
- [ ] automatically update percentage in todo list
- [ ] make undo work like vim (u0?)
- [ ] gz operator to narrow
- [ ] c-o in help buffers?
- [ ] ts textobjects
- [ ] reload pdf on save?
- [ ] if cursor is after last char line, M-l should uppercase last (current) word
- [ ] text object for orgmode block?
- [ ] vip non comprende begin_src?
- [ ] make emacs same ts and lsp as mason? or just use guix
- [ ] whenever u put ^, use it as control vim prefix (for picker loclist, etc... and stuff like ^y in insert mode)
- [ ] C-c C- ->localleader in normal mode?
- [ ] fixa f keys terminal
- [ ] also put ~/dotfiles in org agend for all Todos
- [X] reload this config?
- [ ] use space as l in operator mode
- [ ] u could also use c-w as prefix since u use a/l for that, but don't since vim doesn't have function for windows... maybe wincmd though?
- [ ] C-l as enter for imenu, etc...?
- [ ] is perspectie a global minor mode since it used c-c m-... as prefix?
- [ ] n/l text objects
- [ ] for some reason c-o doesn't work in minibuffer
- [X] (beacon-mode 1)
- [ ] search in this todo lists?
- [ ] automatically jump if symlink... (libraries)
- [X] quickfix/loclist equivalent? kinda, c-c c-o
- [ ] % match also comments (FIX)
- [ ] use i to go to emacs mode from normal mode? like tridactyl
- [ ] use o to go to one shot emacs mode from normal mode? like C-o in vim
- [ ] M-spc and C-M-spc as set mark kinda like universal-argument?
- [ ] 'EtiamNullam/deferred-clipboard.nvim', (x-select-enable-clipboard-manager)
- [ ] surround doesn't work well
- [ ] use localleader in normal mode for emacs keybindings? like localleder vi for identify matrix in emacs calc
- [ ] use C-o in emacs mode to one shot insert mode?
- [ ] using vimscript for scripting/mapping? like %s? create transpiler
- [ ] make insert mode be like emacs mode? get rid of insert mode
- [ ] readline in shell
- [ ] whatsapp
- [ ] indent/dedent in insert/emacs mode?
- [ ] tilde eof
- [-] doom modeline at the top? or at least tabline?
- [ ] vim insert mode equivalents in emacs?
- [ ] colorscheme change night/day?
- [ ] fixa eol behaviour?
- [ ] emacs terminal fn keys
- [ ] org mode headers colored like chakras

** Emacs/vim interaction (Evil Mode)
- [ ] swap file or notify when working on the same file?
- [X] zj and zk in evil?
- [ ] set ft should work like for emacs modes
- [ ] c-r and c-y comparison?
- [ ] in emacs/insert mode, use c-x pressed as k and then x for vim insert, and l/s for emacs c-x
- [ ] use c/m for vim insert mode mappings?
- [ ] syncronize shada/command history
- [ ] from normal mode, go to insert mode after certain keybindings like M-; or M-RET
- [ ] go to normal mode for pickers?

* Universal argument
basically space followed by a modifier should behave as C-u, otherwise as space (leader prefix for groups) (sadly doesn't work for stuff like c-u s in magit..., use hook?)
lol, empty source blocks don't make emacs work...
;;#+begin_src elisp
;;#+end_src

* Authinfo
Use only the gpg-encrypted version of the file.

#+begin_src elisp :tangle no
(setq auth-source-debug nil)
(setq auth-sources '("~/.authinfo.gpg"))
#+end_src


* TRANSPARENCY
With Emacs version 29, true transparency has been added.  I have turned transparency off by setting the alpha to '100'.  If you want some slight transparency, try setting alpha to '90'.  Of course, if you set alpha to '0', the background of Emacs would completely transparent.

TODO: doesn't work in terminal

#+begin_src elisp
(add-to-list 'default-frame-alist '(alpha-background . 87)) ; For all new frames henceforth
#+end_src


* MINIBUFFER
**  ESCAPE
By default, Emacs requires you to hit ESC three times to escape quit the minibuffer.

#+begin_src elisp
;; mappa escape a c-g e c-g a original vim behaviour?
(global-set-key [escape] 'keyboard-escape-quit)
#+end_src

**  READLINE SANITY
#+begin_src elisp
;; replica instert mappings in emacs state?
(define-key minibuffer-local-map (kbd "C-h") #'backward-delete-char)
(define-key minibuffer-local-map (kbd "C-w") #'backward-kill-word)

;; is interactive necessary here?

(with-eval-after-load 'evil-maps
  (define-key evil-insert-state-map (kbd "<ctl-x> C-?") (lambda () (interactive)(kill-line 0)))
  ;; (define-key evil-insert-state-map (kbd "<C-]>") (lambda () (interactive)(evil-execute-in-normal-state)(execute-kbd-macro (kbd "f"))))

  ;; (define-key evil-insert-state-map (kbd "<C-M-]>")
  ;;   (lambda ()
  ;;     (interactive)
  ;;     (evil-execute-in-normal-state
  ;;      (lambda ()
  ;;        (call-interactively #'evil-find-char-backward)))))


  )
(define-key minibuffer-local-map (kbd "<ctl-x> C-?") (lambda () (interactive)(kill-line 0)))
;; (define-key minibuffer-local-map (kbd "M-#") (lambda () (interactive)( 0)))
#+end_src

* FONTS
Defining the various fonts that Emacs will use.

** Setting the Font Face
#+begin_src elisp
(set-face-attribute 'default nil
        ;; :font "JetBrains Mono"
        ;; :font "Iosevka Term Curly-regular-normal"
        :font "Aporetic Sans"
        :height 110
        :weight 'medium)
(set-face-attribute 'variable-pitch nil
        :font "Aporetic Sans"
        :height 120
        :weight 'medium)
(set-face-attribute 'fixed-pitch nil
        :font "Aporetic Sans Mono"
        :height 110
        :weight 'medium)
;; Makes commented text and keywords italics.
;; This is working in emacsclient but not emacs.
;; Your font must have an italic face available.
(set-face-attribute 'font-lock-comment-face nil
        :slant 'italic)
(set-face-attribute 'font-lock-keyword-face nil
        :slant 'italic)

;; This sets the default font on all graphical frames created after restarting Emacs.
;; Does the same thing as 'set-face-attribute default' above, but emacsclient fonts
;; are not right unless I also add this method of setting the default font.
;; (add-to-list 'default-frame-alist '(font . "JetBrains Mono-11"))
;; (add-to-list 'default-frame-alist '(font . "Aporetic Sans"))

;; Uncomment the following line if line spacing needs adjusting.
(setq-default line-spacing 0.12)

#+end_src

* Keybindings
#+begin_src elisp
(define-key global-map (kbd "C-c w") 'webjump)
;;   "s d" '(dictionary-search :wk "Search dictionary")
;;   "s m" '(man :wk "Man pages")
;;   "s t" '(tldr :wk "Lookup TLDR docs for a command")
;;   "s w" '(woman :wk "Similar to man but doesn't require man"))

;; benchmark
;; profiler-{start,stop}

(defun gz/reload-config ()
  "Reload Emacs configuration by loading init.el"
  (interactive)
  (load-file (expand-file-name "~/.config/emacs/init.el"))
  (message "Config reloaded!"))

;; :restart command/keybinding... (maybe C-x C-S-c?)
(defun gz/restart-emacs ()
  "Restart Emacs"
  (interactive)
  (let ((kill-emacs-hook (append kill-emacs-hook (list (lambda () (call-process "emacsclient -a''" nil nil nil))))))
    (save-buffers-kill-emacs)))
#+end_src


* Making deleted files go to trash can
#+begin_src elisp
(setq delete-by-moving-to-trash t trash-directory "~/.local/share/Trash/files/")
#+end_src

NOTE: For convenience, you may want to create a symlink to 'local/share/Trash' in your home directory:
#+begin_example
cd ~/
ln -s ~/.local/share/Trash .
#+end_example

* IMPORTANT PROGRAMS TO LOAD FIRST
To keep this =config.org= a reasonable length, I have moved a lot of code to individual scripts that will be sourced by this config.  These scripts are found in "~/.config/emacs/scripts" and do not contain any code that most people are likely to need to edit.

** Adding the scripts directory to path
#+begin_src elisp
(add-to-list 'load-path "~/.config/emacs/scripts/")
#+end_src

** Sourcing the scripts
#+begin_src elisp
(require 'elpaca-setup)  ;; The Elpaca Package Manager
(require 'app-launchers) ;; Use emacs as a run launcher like dmenu (experimental)
#+end_src

* SANE DEFAULTS
The following settings are simple modes that are enabled (or disabled) so that Emacs functions more like you would expect a proper editor/IDE to function.

#+begin_src elisp
;; (setq use-package-verbose t)
(delete-selection-mode 1)    ;; You can select text and delete it by typing.
(electric-indent-mode -1)    ;; Turn off the weird indenting that Emacs does by default.
(electric-pair-mode 1)       ;; Turns on automatic parens pairing
(global-auto-revert-mode t)  ;; Automatically show changes if the file has changed
(setq global-auto-revert-non-file-buffers t)  ;; Automatically show changes if the file has changed in dired
(column-number-mode)
;; t and 1 difference here?
(global-display-line-numbers-mode 1) ;; Display line numbers
;; Disable line numbers for some modes
(dolist(mode '(org-mode-hook vterm-mode-hook term-mode-hook shell-mode-hook eshell-mode-hook))(add-hook mode (lambda()(display-line-numbers-mode 0))))
(global-visual-line-mode t)  ;; Enable truncated lines
(menu-bar-mode -1)           ;; Disable the menu bar
(scroll-bar-mode -1)         ;; Disable the scroll bar
(tool-bar-mode -1)           ;; Disable the tool bar
;; (setq select-enable-clipboard nil)
(setq xterm-extra-capabilities '(getSelection setSelection))

;;  [[https://www.masteringemacs.org/article/find-files-faster-recent-files-package][RECENT FILES]]
;; enable recent files mode.
(recentf-mode t)

;; 50 files ought to be enough.
(setq recentf-max-saved-items 200)

(setq next-line-add-newlines t)

(setq use-dialog-box nil)

;; (global-set-key [(control h)]  'delete-backward-char)
;; (keyboard-translate ?\C-h ?\s-m-h)
(setq show-trailing-whitespace t)
;; (setq initial-scratch-message "")

(setq search-whitespace-regexp ".*?")

;; do for all files emacs create? maybe single option? not to clutter ~
(setq tramp-histfile-override (concat user-emacs-directory "tramp_history"))

(setq history-length 25)
(savehist-mode 1)
(save-place-mode 1)
(repeat-mode 1)

(setq mouse-autoselect-window t)
(setq focus-follows-mouse t)

;; (setq display-buffer-alist
;;       '(
;;         ("\\*Occur\\*"
;;          ;; If a buffer with the matching major-mode exists in some
;;          ;; window, then use that one.  Otherwise, display the buffer
;;          ;; below the current window.
;;          (display-buffer-reuse-mode-window display-buffer-below-selected)
;;          ;; Then we have the parameters...
;;          (dedicated . t)
;;          (window-height . fit-window-to-buffer))

;;         ))

; Move customization variables to a separate file and load it
(setq custom-file (locate-user-emacs-file "custom-vars.el"))
(load custom-file 'noerror 'nomessage)

(setq use-short-answers t)
(setq isearch-wrap-pause 'no-ding)

(setq disabled-command-function nil)
(setopt tab-bar-new-tab-choice "*scratch*")

;; (setq desktop-dirname (concat user-emacs-directory "sessions")

;; https://www.reddit.com/r/emacs/comments/osscfd/pgtk_emacswaylandgnome_no_shiftspace/
(setq pgtk-use-im-context nil)
(setq pgtk-use-im-context-on-new-connection nil)

(setq which-key-idle-delay 0.1)
(setq confirm-kill-emacs nil)
(setq-default indicate-empty-lines t)  ; i also don't want to Go beyond last line

(setq mu4e-view-use-gnus t) 

;; display current and total matches
;; (use-package anzu
;; :config
;; (global-anzu-mode +1)

;; (setq isearch-wrap-pause nil)    ;wrap search
;; )

(setenv "PATH" (concat (expand-file-name "~/.local/bin") ":" (getenv "PATH")))
(setq exec-path (cons (expand-file-name "~/.local/bin") exec-path))

;; you can start Emacs from a terminal where ssh-agent is already running, or propagate the SSH_AUTH_SOCK env var to Emacs using:
(setenv "SSH_AUTH_SOCK" (getenv "SSH_AUTH_SOCK"))

;; (setq browse-url-browser-function 'eww-browse-url) ; use w/ webjump
(setq webjump-use-internal-browser t)

(setq dictionary-server "dict.org")

#+end_src

** [[https://www.reddit.com/r/emacs/comments/3u0d0u/how_do_i_make_the_vertical_window_divider_more/][Prettier vertical window divider in terminal]]
#+begin_src elisp

(defun my-change-window-divider ()
  (let ((display-table (or buffer-display-table standard-display-table)))
    (set-display-table-slot display-table 5 ?│)
    (set-window-display-table (selected-window) display-table)))

(add-hook 'window-configuration-change-hook 'my-change-window-divider)
#+end_src


* Personal information
#+begin_src elisp :tangle no
;; Private Stuff
(setq user-full-name "")
(setq user-mail-address "")
#+end_src

* MULTILINGUAL EDITING
#+begin_src elisp
(setq default-input-method "devanagari-itrans")
#+end_src

* VIM PARITY

#+begin_src elisp
(defun open-line-below (&optional count)
  "Open COUNT new lines below the current line and move the cursor to the first one."
  (interactive "p")
  (end-of-line)
  (dotimes (_ (or count 1))
    (newline-and-indent)))

(defun open-line-above (&optional count)
  "Open COUNT new lines above the current line and move the cursor to the first one."
  (interactive "p")
  (beginning-of-line)
  (newline-and-indent)
  (forward-line -1)
  (indent-according-to-mode)
  (dotimes (_ (1- (or count 1)))
    (newline-and-indent)))

(with-eval-after-load 'evil-maps
  ;; doesn't work
  ;;(define-key evil-normal-state-map (kbd "d =") #'ediff-current-file)
  ;; c-l diffupdate? automatically though?

  ;; terminal trick
  (define-key evil-insert-state-map (kbd "M-o") #'open-line-below)
  (define-key evil-insert-state-map (kbd "M-O") #'open-line-above)
  )
#+end_src

gcO equivalenent: O<M-j>
gco equivalenent: o<M-j>
screenshots? https://github.com/tecosaur/screenshot
  bs visual mode remove duplicates
**** Invert comments
#+begin_src elisp
;; (defun evil-invert-comment-region ()
;;   "Comment uncommented lines and uncomment commented lines in the selected region.
;;   Uses the proper comment syntax for the current major mode."
;;   (interactive)
;;   (let* ((beg (region-beginning))
;;          (end (region-end))
;;          (commented-lines 0)
;;          (total-lines 0))

;;     ;; Count commented lines using the mode's comment syntax
;;     (save-excursion
;;       (goto-char beg)
;;       (while (< (point) end)
;;         (beginning-of-line)
;;         (setq total-lines (1+ total-lines))
;;         (when (comment-only-p (line-beginning-position)
;;                               (line-end-position))
;;           (setq commented-lines (1+ commented-lines)))
;;         (forward-line 1)))

;;     ;; If more than half of lines are commented, uncomment the region
;;     ;; Otherwise, comment the region
;;     (if (>= commented-lines (/ total-lines 2))
;;         (uncomment-region beg end)
;;       (comment-region beg end))))

;; ;; Bind it to a key in evil visual mode
;; (evil-define-key '(visual) 'global (kbd "gi") 'evil-invert-comment-region)
#+end_src

* BACKUP
By default, Emacs creates automatic backups of files in their original directories, such "file.el" and the backup "file.el~".  This leads to a lot of clutter, so let's tell Emacs to put all backups that it creates in the =TRASH= directory.

#+begin_src elisp
(setq backup-directory-alist '((".*" . "~/.local/share/Trash/files")))
#+end_src

* Plugins
** ALL THE ICONS
This is an icon set that can be used with dashboard, dired, ibuffer and other Emacs programs.

#+begin_src elisp
(use-package all-the-icons
  :ensure t
  :if (display-graphic-p))

(use-package all-the-icons-dired
  :hook (dired-mode . (lambda () (all-the-icons-dired-mode t))))
#+end_src

** COMPANY
[[https://company-mode.github.io/][Company]] is a text completion framework for Emacs. The name stands for "complete anything".  Completion will start automatically after you type a few letters. Use M-n and M-p to select, <return> to complete or <tab> to complete the common part.

#+begin_src elisp
(use-package company
  :defer 2
  :diminish
  :custom
  (company-begin-commands '(self-insert-command))
  (company-idle-delay .1)
  (company-minimum-prefix-length 2)
  (company-show-numbers t)
  (company-tooltip-align-annotations 't)
  (global-company-mode t)
  :bind(
  ;; :map evil-insert-state-map
  :map company-active-map

  ("C-j" . company-select-next-or-abort)
  ("C-k" . company-select-previous-or-abort)
  ("C-l" . company-complete-selection))
  ;; (:map lsp-mode-map
  ;;       ("<tab>" . company-indent-or-complete-common))


  ;; (define-key company-search-map (kbd "C-t") 'company-search-toggle-filtering)

  )

(use-package company-box
  :after company
  :diminish
  :hook (company-mode . company-box-mode))
#+end_src

** DASHBOARD
Emacs Dashboard is an extensible startup screen showing you recent files, bookmarks, agenda items and an Emacs banner.

#+begin_src elisp
(use-package dashboard
  :ensure t
  :init
  (setq initial-buffer-choice 'dashboard-open)
  (setq dashboard-set-heading-icons t)
  (setq dashboard-set-file-icons t)
  (setq dashboard-banner-logo-title "Emacs Is More Than A Text Editor!")
  ;;(setq dashboard-startup-banner 'logo) ;; use standard emacs logo as banner
  ;; TODO: make transparent
  ;; https://www.reddit.com/r/emacs/comments/1f068oi/i_have_commissioned_an_artist_to_draw_an_emacs/

  (setq dashboard-startup-banner "~/.config/emacs/images/emacs-dragon-small.png")  ;; use custom image as banner
  (setq dashboard-center-content t) ;; set to 't' for centered content
  (setq dashboard-items '((recents . 5)
                          (agenda . 5 )
                          (bookmarks . 3)
                          (projects . 3)
                          (registers . 3)))
  :custom
  (dashboard-modify-heading-icons '((recents . "file-text")
            (bookmarks . "book")))
  :config
  (dashboard-setup-startup-hook))

#+end_src

** DIMINISH
This package implements hiding or abbreviation of the modeline displays (lighters) of minor-modes.  With this package installed, you can add ':diminish' to any use-package block to hide that particular mode in the modeline.

#+begin_src elisp
(use-package diminish)
#+end_src

** BEACON
Highlight cursor position when switching windows or scrolling.

#+begin_src elisp
(use-package beacon
  :ensure t
  :config
  (beacon-mode 1)
; https://github.com/Malabarba/beacon/issues/81
(setq beacon-do-blink-commands
  '(evil-scroll-up evil-scroll-down
     evil-goto-line evil-goto-last-line))
(defun beacon-do-blink-command (func)
  (advice-add func
    :after
    (lambda (func &rest args)
      (let ((beacon-dont-blink-commands '()))
        (beacon--post-command)))))
(mapc #'beacon-do-blink-command beacon-do-blink-commands))
     )
#+end_src

** DIRED
Bookmarks like in mini.files?
#+begin_src elisp
(use-package dired-open
  :after dired
  :config
  (setq dired-open-extensions '(
          ;; ("gif" . "sxiv")
          ;; ("jpg" . "sxiv")
          ;; ("png" . "sxiv")
             ("mkv" . "mpv")
             ("mp4" . "mpv"))))
          ;; ("pdf" . "sioyek"))))

(use-package dired
  :after evil-collection
  :ensure nil
  ;; :commands (dired dired-jump)
  :custom (
     ;; (setq dired-dwim-target t)
     (dired-listing-switches "-agho --group-directories-first")
     ;; (setq dired-listing-switches "-lhgoBF --group-directories-first")
     ;; (setq diredp-toggle-find-file-reuse-dir t)


     )
  :config
  (evil-collection-define-key 'normal 'dired-mode-map
    "h" 'dired-up-directory
    "l" 'dired-find-file))

          ; (eval-after-load "dired" '(progn
          ;   (define-key dired-mode-map (kbd "q") 'kill-this-buffer)
          ;   (define-key dired-mode-map (kbd "h") 'dired-up-directory)
          ;   (define-key dired-mode-map (kbd "l") 'dired-open-file)
          ;   ; (define-key dired-mode-map (kbd "o") 'dired-sort-toggle-or-edit)
          ;   ; (define-key dired-mode-map (kbd "v") 'dired-toggle-marks)
          ;   ; (define-key dired-mode-map (kbd "m") 'dired-mark)
          ;   ; (define-key dired-mode-map (kbd "u") 'dired-unmark)
          ;   ; (define-key dired-mode-map (kbd "U") 'dired-unmark-all-marks)
          ; (define-key dired-mode-map (kbd "c") 'dired-create-directory)
          ; ))

#+end_src

** EDIFF
'ediff' is a diff program that is built into Emacs.  By default, 'ediff' splits files vertically and places the 'help' frame in its own window.  I have changed this so the two files are split horizontally and the 'help' frame appears as a lower split within the existing window.  Also, I create my own 'dt-ediff-hook' where I add 'j/k' for moving to next/prev diffs.  By default, this is set to 'n/p'.

automatically fold when moving j/k?
(use-package ztree)

#+begin_src elisp
(setq ediff-split-window-function 'split-window-horizontally
      ediff-window-setup-function 'ediff-setup-windows-plain)
#+end_src

** ELFEED
An RSS newsfeed reader for Emacs.  Move through the articles with 'j/k'.  Move through the stories with 'CTRL j/k' when in other frame.

https://github.com/remyhonig/elfeed-org

#+begin_src elisp
(use-package elfeed
  :bind (("C-c e" . elfeed))
  :init
  (setq elfeed-db-directory (concat user-emacs-directory "elfeed/db/")
        elfeed-enclosure-default-dir (concat user-emacs-directory "elfeed/enclosures/"))
  :config
  (setq elfeed-search-feed-face ":foreground #ffffff :weight bold"
        elfeed-feeds (quote
                      (("https://www.reddit.com/r/linux.rss?sort=new" reddit linux)
                       ("https://www.reddit.com/r/commandline.rss" reddit commandline)
                       ("https://www.reddit.com/r/distrotube.rss" reddit distrotube)
                       ("https://www.reddit.com/r/emacs.rss" reddit emacs)
                       ("https://www.gamingonlinux.com/article_rss.php" gaming linux)
                       ("https://hackaday.com/blog/feed/" hackaday linux)
                       ("https://opensource.com/feed" opensource linux)
                       ("https://linux.softpedia.com/backend.xml" softpedia linux)
                       ("https://itsfoss.com/feed/" itsfoss linux)
                       ("https://www.zdnet.com/topic/linux/rss.xml" zdnet linux)
                       ("https://www.phoronix.com/rss.php" phoronix linux)
                       ("http://feeds.feedburner.com/d0od" omgubuntu linux)
                       ("https://www.computerworld.com/index.rss" computerworld linux)
                       ("https://www.networkworld.com/category/linux/index.rss" networkworld linux)
                       ("https://www.techrepublic.com/rssfeeds/topic/open-source/" techrepublic linux)
                       ("https://betanews.com/feed" betanews linux)
                       ("http://lxer.com/module/newswire/headlines.rss" lxer linux)
                       ("https://distrowatch.com/news/dwd.xml" distrowatch linux))))
  (with-eval-after-load 'evil-collection
    (evil-collection-define-key 'normal 'elfeed-search-mode-map
      "l" 'elfeed-search-show-entry)))	; also remain in elfeed window?


(use-package elfeed-goodies
  :after elfeed
  :config
  (elfeed-goodies/setup)
  (setq elfeed-goodies/entry-pane-size 0.5))

(use-package elfeed-tube
  :ensure t
  :after elfeed
  :config
  ;; (setq elfeed-tube-auto-save-p nil) ; default value
  ;; (setq elfeed-tube-auto-fetch-p t)  ; default value
  (elfeed-tube-setup)

  :bind (:map elfeed-show-mode-map
              ("F" . elfeed-tube-fetch)
              ([remap save-buffer] . elfeed-tube-save)
              :map elfeed-search-mode-map
              ("F" . elfeed-tube-fetch)
              ([remap save-buffer] . elfeed-tube-save)))

(use-package elfeed-tube-mpv
  :after elfeed
  :ensure t
  :bind (:map elfeed-show-mode-map
              ("C-c C-f" . elfeed-tube-mpv-follow-mode)
              ("C-c C-w" . elfeed-tube-mpv-where)))

#+end_src

** EVIL
[[https://github.com/emacs-evil/evil][Evil]] is an extensible vi/vim layer for Emacs.  Because...let's face it.  The Vim keybindings are just plain better.

evil-toggle-key
#+begin_src elisp
(use-package evil
  ;; :init      ; tweak evil's configuration before loading it
   :init
   (setq evil-want-integration t ;; This is optional since it's already set to t by default.
        evil-want-keybinding nil
	evil-want-minibuffer nil
  ;; this way i can learn emacs
  ;; still want a way/keybinding to use one-shot insert mode keybinding tho (C-z)?
        evil-disable-insert-state-bindings t ;; also wanna disable command-state-bindings?
        evil-vsplit-window-right t
        evil-split-window-below nil
        evil-undo-system 'undo-redo ;; Adds vim-like C-r redo functionality
        ;; evil-want-C-h-delete t
        evil-want-C-u-scroll t
        evil-want-Y-yank-to-eol t
    evil-search-module 'i-search
        ;;evil-want-C-w-delete t

  ;;DISAMBIGUATE TAB and C-i
  evil-want-C-i-jump nil
  evil-lookup-func (lambda () (man (thing-at-point 'word))))

  :config
  (evil-set-leader '(normal visual) (kbd "SPC"))
  (evil-set-leader '(normal visual) "\\" t)
  (evil-mode 1)
  ;; (evil-define-key 'normal 'global (kbd "<leader>...") '...)

;; https://stackoverflow.com/questions/46513910/emacs-evil-mode-binding-mouse-event
(define-key evil-motion-state-map [down-mouse-1] nil) ; for artist-mode

  )

(use-package evil-collection
  :after evil
  :config
  ;; Do not uncomment this unless you want to specify each and every mode
  ;; that evil-collection should works with.  The following line is here
  ;; for documentation purposes in case you need it.
  ;; (setq evil-collection-mode-list '(calendar dashboard dired ediff info magit ibuffer))
  (add-to-list 'evil-collection-mode-list 'help) ;; evilify help mode

  (evil-collection-init)
  (evil-select-search-module 'evil-search-module 'evil-search)

  (add-hook 'git-commit-setup-hook 'evil-insert-state)
  (dolist (mode-map '((inferior-emacs-lisp-mode . emacs)
             (nrepl-mode . insert)
             (pylookup-mode . emacs)
             (comint-mode . normal)
             (pdf-view-mode . motion)
             (shell-mode . insert)
             (git-commit-mode . insert)
             (git-rebase-mode . emacs)
             (term-mode . emacs)
             (help-mode . normal)
             (helm-grep-mode . emacs)
             (grep-mode . emacs)
             (bc-menu-mode . emacs)
             (magit-branch-manager-mode . emacs)
             (rdictcc-buffer-mode . emacs)
             ;; (dired-mode . emacs)
             (wdired-mode . normal)))
    (evil-set-initial-state `,(car mode-map) `,(cdr mode-map)))

  )

;; https://www.reddit.com/r/emacs/comments/mtuvyw/people_should_not_bombard_newbies_with_messages/
;; buffer-modified-p and after-change-functions
;; would be nice to differentiate between manual and automatic saving...
;; (add-hook 'evil-insert-state-exit-hook 'save-buffer
(defun my-save-if-bufferfilename ()
  (if (buffer-file-name)
      (progn
        (save-buffer)
        )
    (message "no file is associated to this buffer: do nothing")
    )
  )

(add-hook 'evil-insert-state-exit-hook 'my-save-if-bufferfilename)


(use-package evil-surround :ensure t :config (global-evil-surround-mode 1)
  (setq-default evil-surround-pairs-alist (push '(?a . ("<" . ">")) evil-surround-pairs-alist))
  (setq-default evil-surround-pairs-alist (push '(?r . ("[" . "]")) evil-surround-pairs-alist))
  ;; https://github.com/konrad1977/emacs/blob/a9bfdec276198b080783377a2d4ade3e009c7210/init.el#L985
  ;; :custom (evil-surround-pairs-alist
  ;;          '((?r . ("[" . "]"))
  ;;            (?a . ("<" . ">"))))
  ;; this macro was copied from here: https://stackoverflow.com/a/22418983/4921402
  (defmacro define-and-bind-quoted-text-object (name key start-regex end-regex)
    (let ((inner-name (make-symbol (concat "evil-inner-" name)))
    (outer-name (make-symbol (concat "evil-a-" name))))
      `(progn
   (evil-define-text-object ,inner-name (count &optional beg end type)
     (evil-select-paren ,start-regex ,end-regex beg end type count nil))
   (evil-define-text-object ,outer-name (count &optional beg end type)
     (evil-select-paren ,start-regex ,end-regex beg end type count t))
   (define-key evil-inner-text-objects-map ,key #',inner-name)
   (define-key evil-outer-text-objects-map ,key #',outer-name))))

;;  follows keyboard order
  (define-and-bind-quoted-text-object "bang" "!" "!" "!")
  (define-and-bind-quoted-text-object "at" "@" "@" "@")
  (define-and-bind-quoted-text-object "hash" "#" "#" "#")
  (define-and-bind-quoted-text-object "dollar" "$" "\\$" "\\$") ;; sometimes your have to escape the regex
  (define-and-bind-quoted-text-object "percent" "%" "%" "%")
  (define-and-bind-quoted-text-object "caret" "^" "\\^" "\\^")
  (define-and-bind-quoted-text-object "ampersand" "&" "\\&" "\\&")
  (define-and-bind-quoted-text-object "asterisk" "*" "*" "*")
  (define-and-bind-quoted-text-object "dash" "-" "-" "-")
  (define-and-bind-quoted-text-object "underscore" "_" "_" "_")
  (define-and-bind-quoted-text-object "plus" "+" "+" "+")
  (define-and-bind-quoted-text-object "equal" "=" "=" "=")
  (define-and-bind-quoted-text-object "slash" "/" "/" "/")
  (define-and-bind-quoted-text-object "pipe" "|" "|" "|")
  (define-and-bind-quoted-text-object "backslash" "\\" "\\\\" "\\\\")
  (define-and-bind-quoted-text-object "colon" ":" ":" ":")
  (define-and-bind-quoted-text-object "semicolon" ";" ";" ";")
  (define-and-bind-quoted-text-object "comma" "," "," ",")
  (define-and-bind-quoted-text-object "dot" "." "\\." "\\.")

  ;; k->inverse of j (subword), similar to \k in vim, complementary to kill-sexp C-M-k
(define-key evil-outer-text-objects-map "k" 'evil-a-symbol)
(define-key evil-inner-text-objects-map "k" 'evil-inner-symbol)

  )
;; (use-package targets
;;   :ensure (:host github :repo "noctuid/targets.el")
;; )
(use-package evil-numbers
  :bind (
   :map evil-normal-state-map
   ("C-a" . evil-numbers/inc-at-pt)
   ("C-x" . evil-numbers/dec-at-pt)

   ))
;; (use-package evil-mc :ensure t :config (global-evil-mc-mode 1) )
(use-package evil-commentary :ensure t
  :bind (
   :map evil-normal-state-map
   ("gc" . evil-commentary)))

(use-package goto-chg :defer t)
;; https://github.com/roman/evil-paredit

(use-package evil-exchange
  :bind (
   :map evil-normal-state-map
   ("cx" . evil-exchange)
   :map evil-visual-state-map
   ("X" . evil-exchange)
   :map evil-normal-state-map
   ("X" . evil-exchange-cancel))	; cxc?

  :config
  (evil-exchange-cx-install)
  )
(use-package evil-goggles
  :after evil
  :ensure t
  :custom
  (evil-goggles-pulse t)
  (evil-goggles-duration 0.100)
  :config
  (evil-goggles-mode)
  (evil-goggles-use-diff-faces)

  )
;; also add evil-markdown and check out similar plugins
;; (use-package evil-org
;; :ensure t
;; :after org
;; :hook(org-mode . (lambda() evil-org-mode))
;; :config
;; (require 'evil-org-agenda)
;; (evil-org-agenda-set-keys)
;; )
;; Using RETURN to follow links in Org/Evil
;; Unmap keys in 'evil-maps if not done, (setq org-return-follows-link t) will not work
(with-eval-after-load 'evil-maps
          ; (evil-define-key* 'normal help-mode-map (kbd "C-o") 'evil-jump-backward)
          ; (evil-define-key* 'normal Info-mode-map (kbd "C-o") 'evil-jump-backward)

  (evil-define-key 'normal help-mode-map
    (kbd "C-o") 'evil-jump-backward)


  ;; would nice that it resptected v:count like 2gO to show only 2nd level header?
  ;; (define-key evil-normal-state-map (kbd "g O") #'counsel-imenu )
  (define-key evil-normal-state-map (kbd "g O") #'counsel-outline )
  ;;  region? C-u g K for <CWORD>?
  (define-key evil-normal-state-map (kbd "g K") #'dictionary-lookup-definition)

  (define-key evil-normal-state-map (kbd "C-i") 'evil-jump-forward)

  ;; like snacks bindings
  ;;(define-key evil-normal-state-map (kbd "C-k") (kbd "C-x C-+"))
  ;;(define-key evil-normal-state-map (kbd "C-j") (kbd "C-x C--"))
  ;; actually u can use viml
  ;; (define-key evil-normal-state-map (kbd "ycc") (execute-kbd-macro "yygccp"))
  ;; usa native keybindings...

  ;; (define-key evil-insert-state-map (kbd "C-u") 'evil-delete-backward-char-and-join)

  (define-key evil-insert-state-map (kbd "C-h") 'evil-delete-backward-char-and-join)
  ;; (define-key isearch-mode-map (kbd "C-h") 'evil-delete-backward-char-and-join)

; https://www.reddit.com/r/emacs/comments/6noffx/favorite_editing_tricks_or_keybindings/
  (defun kill-region-or-backward-word ()
    (interactive)
    (if (region-active-p)
  (kill-region (region-beginning) (region-end))
      (backward-kill-word 1)))
  ;;  (define-key evil-insert-state-map (kbd "C-w") 'backward-kill-word)
  (define-key evil-insert-state-map (kbd "C-w") 'kill-region-or-backward-word)
  ;; (define-key evil-ex-search-keymap "\C-w" 'backward-kill-word)
  (define-key evil-ex-search-keymap "\C-w" #'evil-delete-backward-word)
  (define-key evil-ex-search-keymap "\C-h" #'backward-delete-char-untabify)

  ;; (define-key evil-outer-text-objects-map "j" 'subword)

  (define-key evil-outer-text-objects-map "r" 'evil-a-bracket)
  (define-key evil-inner-text-objects-map "r" 'evil-inner-bracket)
  (define-key evil-outer-text-objects-map "a" 'evil-an-angle)
  (define-key evil-inner-text-objects-map "a" 'evil-inner-angle)
  ;; alias for multiple?
  (define-key evil-outer-text-objects-map "q" 'evil-a-double-quote)
  (define-key evil-inner-text-objects-map "q" 'evil-inner-double-quote)

  ;; how to Continue being in insert mode if called from insert mode?
  (global-set-key (kbd "<f16>") 'evil-window-map)

  (define-key evil-command-line-map (kbd "C-a") 'move-beginning-of-line)
  (define-key evil-command-line-map (kbd "C-b") 'backward-char)
  (define-key evil-command-line-map (kbd "C-f") 'forward-char)
  (define-key evil-command-line-map (kbd "C-d") 'delete-char)
  (define-key evil-command-line-map (kbd "M-p") 'previous-complete-history-element)
  (define-key evil-command-line-map (kbd "M-n") 'next-complete-history-element)

  ;;(evil-normal-state)(setq unread-comand-events (listify-key-sequence (kbd "C-w")))))

  ;; so i can use C-h as backspace and C-h as help
  ;; <help> translation?
  (define-key global-map (kbd "<f18>") #'help-command)
  ;; also want this in ivy/command... basially everywhere (use remap?)

  ;; (define-key evil-normal-state-map (y c c) lambda() comment-line duplicate-line

  ;; doesn't work in minibuffer/find-file
  ;; (evil-define-key 'insert 'global "\C-h" 'backward-delete-char-untabify)
    )

#+end_src

** FLYCHECK
Install =luacheck= from your Linux distro's repositories for flycheck to work correctly with lua files.  Install =python-pylint= for flycheck to work with python files.  Haskell works with flycheck as long as =haskell-ghc= or =haskell-stack-ghc= is installed.  For more information on language support for flycheck, [[https://www.flycheck.org/en/latest/languages.html][read this]].

#+begin_src elisp
(use-package flycheck
  :ensure t
  :defer t
  :diminish
  :init (global-flycheck-mode))

(use-package flyover
  :ensure (:host github :repo "konrad1977/flyover")
  :hook (flycheck-mode . flyover-mode)
  )
#+end_src

*** Font preview
#+begin_src elisp
(use-package show-font
  :ensure (:host github :repo "protesilaos/show-font"))
#+end_src

** GENERAL KEYBINDINGS
#+begin_src elisp
(use-package general
  :after evil
  :config
  (general-evil-setup)
#+end_src

*** Toggle
#+begin_src elisp

(general-create-definer gz/unimpaired
  ;; add insert
  :states '(normal insert);; visual as well? (operate on regions)
  :keymaps 'override
  ;; :prefix "co" ;; set leader
  :prefix "<f13>" ;; set leader
  )
(gz/unimpaired
  "n" '(display-line-numbers-mode :wk "Toggle line numbers")
  ;; this isnt wrap though
  ;;"w" '(visual-line-mode :wk "Toggle truncated lines"))
  "w" '(toggle-truncate-lines :wk "Toggle truncated lines")
  "e" '(visible-mode :wk "Toggle conceal")
  ;;"SPC" '(whitespace-mode :wk "Toggle whitespace-mode"))
  "l" '(whitespace-mode :wk "Toggle whitespace-mode")
  "z" '(visual-fill-column-mode :wk "Zen mode")
  "p" '(pcheckdoc-startage-break-lines-mode :wk "Pages")
  "d" '(prism-mode :wk "Color By Depth")
  "b" '((lambda()(interactive)(invert-face 'default)) :wk "Toggle background color"))
#+end_src

*** Picker
  is there a similar plugin for emacs?
  maybe use translation
  maybe use one prefix for snacks and another for one shot commands
;; use C-c leter for one-shot keybindings (without groups) and leader for groups
#+begin_src elisp

(general-create-definer gz/picker
  :states '(normal insert);; visual as well? (operate on regions)
  :keymaps 'override
  :prefix "<f17>" ;; set leader
  )

(gz/picker
  "m" 'man
  "/" 'swiper
  ;; zen/zoom?
  "r" 'counsel-recentf
  "c" 'counsel-load-theme ; make this refresh theme?
  "C" 'counsel-colors-web
  ;; library and packages difference?
  "p" 'counsel-find-library
  "h" 'counsel-faces
  ;; "m" 'counsel-rhythmbox
  ;; "M" 'counsel-rhythmbox-playpause-current-song
  ;; "h" 'counsel-command-history
  ;; "h" 'counsel-minibuffer-history
  "d" 'consult-flymake ; consult???
  "l" 'counsel-locate
)
#+end_src

*** <Leader>
#+begin_src elisp


;; set up 'SPC' as the global leader key
(general-create-definer gz/leader-keys
  :states '(normal insert visual emacs)
  :keymaps 'override
  :prefix "SPC" ;; set leader
  ;; :global-prefix "M-SPC";; access leader in insert mode
  :global-prefix "<f19>";; i wanna use m-spc in insert mode... per il momento ignora, magari usa S-spc
  )


(gz/leader-keys

  ;;"=" '(perspective-map :wk "Perspective") ;; Lists all the perspective keybindings
  "u" '(universal-argument :wk "Universal argument") ; doesn't work for (C-u){2,}

  ;;"RET"
  ;;'((lambda ()
  ;;(vterm)))

  "SPC"
  '((lambda ()
      (interactive)
      (start-process
       "send-clipboard" nil
       "hyprctl" "dispatch" "exec" "[float;size 30% 30%] ghostty -e nvim -c \"norm 1 Qd\""))
    :wk "Send clipboard")

  ;; would be cool if worked in visual mode ala narrowing
  ;; also match modes (if insert stays in insert) in both editors
  ;; also support current windows/session
  "&"
  '((lambda ()
      (interactive)
      (if buffer-file-name
	  (if (buffer-modified-p)
	      (message "Buffer modified. Please save before opening in Neovim.")
            (start-process
             "open-in-nvim" nil
             "ghostty" "-e" "nvim"
             ;; (format "+%d" (line-number-at-pos))
             (format "-c%d" (line-number-at-pos))
             (shell-quote-argument buffer-file-name)))
	(message "Current buffer is not visiting a file.")))
    :wk "Open in Neovim")

  ;; doesn't work
  "E" '(lambda()(interactive)
         (if buffer-file-name
             (async-shell-command
              (format "dbus-launch emacsclient -a '' -c +%d %s"
                      (line-number-at-pos)
                      (shell-quote-argument buffer-file-name)))
           (message "Current buffer is not visiting a file."))) :wk "Open in Emacs GUI"
  )

;; how to show the descriptions in c-h l (lossage)?
;; (directory-files "~/dotfiles" t "_[[:alpha:]]\\.org$")
(gz/leader-keys
  ;; use bookmarks?
  "e" '(:ignore t :wk "Edit")

  ;; uppercase: containing directory/global
  ;; crea unico file e tangle in both vim & emacs?
  "e E" '((lambda () (interactive) (dired "~/.config/emacs/")) :wk "Emacs dir")
  "e e" '((lambda () (interactive) (find-file "~/.config/emacs/config.org")) :wk "emacs ")
  "e k" '((lambda () (interactive) (find-file "~/dots/kanata.org")) :wk "kanata")
  "e v" '((lambda () (interactive) (find-file "~/.config/nvim/config.org")) :wk "Neovim config")
  "e V" '((lambda () (interactive) (dired "~/.config/nvim/")) :wk " in dired")
  "e i" '((lambda () (interactive) (find-file "~/dots/inputrc.org")) :wk "inputrc")
  "e f" '((lambda () (interactive) (find-file "~/dots/fzf.org")) :wk "fzf")
  "e m" '((lambda () (interactive) (find-file "~/dots/mpv.org")) :wk "Mpv")
  "e r" '((lambda () (interactive) (find-file "~/dots/reaper.org")) :wk "Reaper")
  "e h" '((lambda () (interactive) (find-file "~/dots/hypr.org")) :wk "Hypr")
  "e p" '((lambda () (interactive) (find-file "~/dots/profile.org")) :wk "profile")
  "e g" '((lambda () (interactive) (find-file "~/dots/git.org")) :wk "Git")
  "e a" '((lambda () (interactive) (find-file "~/dots/atuin.org")) :wk "Atuin")
					; "e H" '((lambda () (interactive) (dired "~/.config/hypr/")) :wk "hypr in dired")
  "e s" '((lambda () (interactive) (find-file "~/dots/sioyek.org")) :wk "Sioyek")
  "e w" '((lambda () (interactive) (find-file "~/dots/waybar.org")) :wk "Waybar")
  "e b" '((lambda () (interactive) (find-file "~/dots/bash.org")) :wk "Bashrc")
  "e z" '((lambda () (interactive) (find-file "~/dots/zsh.org")) :wk "Bashrc")
  "e t" '((lambda () (interactive) (find-file "~/dots/tridactylrc.org")) :wk "Tridactyl")

  "e <RET>" '((lambda () (interactive) (find-file "~/dots/_ghostty.org")) :wk "ghostty config"))

;; how to put these in use-package?
(gz/leader-keys
  "a" '(:ignore t :wk "AI")
  "a a" '(gptel :wk "gptel")
  "a m" '(gptel-menu :wk "gptel menu")
  "a c" '(gptel-add :wk "gptel add context")
  "a r" '(gptel-rewrite :wk "gptel rewrite")
  )

(gz/leader-keys
  "g" '(:ignore t :wk "Git")
  "g s" '(git-gutter:stage-hunk :wk "Stage hunk")
  "g u" '(git-gutter:revert-hunk :wk "Unstage hunk ")
  )

(gz/leader-keys
  "r" '(:ignore t :wk "Reload")
  "r r" '(gz/reload-config :wk "Reload config")
  "r R" '(gz/restart-emacs :wk "Restart Emacs")
  )
)
#+end_src

** GIT
*** Magit
[[https://magit.vc/manual/][Magit]] is a full-featured git client for Emacs.

saving = C-c behavior?
how to go from diff to file w/ line num?

- [ ] Always open status on the right? I'd like To know how to do it with smth dumb like ^wL

#+begin_src elisp
(use-package transient)
(setq magit-define-global-key-bindings 'recommended)
(use-package magit :after transient
  ;; using just keys without fn like in lazy?
  ;; :bind ()
  :custom
  (magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1)

  )
(use-package magit-todos
  :after magit
  :config (magit-todos-mode 1))
(use-package magit-delta
  :custom ( magit-delta-hide-plus-minus-markers nil)
  :hook (magit-mode . magit-delta-mode))
#+end_src

*** Forge
#+begin_src elisp
;; (use-package forge
;;   :after magit)
#+end_src

*** Git-gutter
#+begin_src elisp
(use-package git-gutter
  :demand t
  :bind
  (
   :map evil-normal-state-map
   ("[g" . git-gutter:previous-hunk)
   ("]g" . git-gutter:next-hunk)
   )
  :custom 
	   
 (git-gutter:modified-sign (nerd-icons-octicon "nf-oct-diff_modified"))
              (git-gutter:added-sign (nerd-icons-octicon "nf-oct-diff_added"))
              (git-gutter:deleted-sign (nerd-icons-octicon "nf-oct-diff_removed"))
	   
  :config (global-git-gutter-mode +1))
#+end_src

** HIGHLIGHT TODO
Adding highlights to TODO and related words.

#+begin_src elisp
(use-package hl-todo
  :hook ((org-mode . hl-todo-mode)
         (prog-mode . hl-todo-mode))
  :config
  (setq hl-todo-highlight-punctuation ":"
        hl-todo-keyword-faces
        `(("TODO"       warning bold)
          ("FIXME"      error bold)
          ("HACK"       font-lock-constant-face bold)
          ("REVIEW"     font-lock-keyword-face bold)
          ("NOTE"       success bold)
          ("DEPRECATED" font-lock-doc-face bold))))

#+end_src

** IVY (COUNSEL)
+ Ivy, a generic completion mechanism for Emacs.
+ Counsel, a collection of Ivy-enhanced versions of common Emacs commands.
+ Ivy-rich allows us to add descriptions alongside the commands in M-x.

  M-v doesn't work if first item...
  does wk work?
;;("SPC SPC" .counsel-M-x :wk "Counsel M-x")
  open in other window action?

ivy-occur copy the whole line, not just selected?
also check out helm/etc... keybindings

#+begin_src elisp
(use-package counsel
  :after ivy
  :diminish
  :bind (
   :map evil-normal-state-map

;;'(find-grep-dired :wk "Search for string in files in DIR")
;;'(counsel-grep-or-swiper :wk "Search for string current file")
   ("C-p" . counsel-fzf) ;; current cwd
   ;; '(counsel-file-jump :wk "Jump to a file below current directory")
   ("C-S-p" . project-find-file)       ; project?
   ("C-q" . counsel-rg) ;; current cwd
   ("C-S-q" . counsel-git-grep) ;; current cwd
   ;; ("C-q" . counsel-grep like vim?)
   ;; ("C-x b" . counsel-ibuffer)
   ;; ([ctl-x] "b" . counsel-ibuffer)

   ;; ("<clt-x> b" . counsel-ibuffer)

   )
  :config
  (counsel-mode)
  (add-to-list 'ivy-more-chars-alist '(counsel-rg . 0))
  (add-to-list 'ivy-more-chars-alist '(counsel-git-grep . 0))
  (setq ivy-initial-inputs-alist nil) ;; removes starting ^ regex in M-x
  (setq ivy-auto-select-single-candidate t)) ;; useful for gptel

(use-package swiper
  :after ivy
  :bind (
         :map swiper-map
         ("C-l" . ivy-done))
  )

(use-package ivy
  :bind
  ;; ivy-resume resumes the last Ivy-based completion.
  (
   ; ("C-c C-r" . ivy-resume) (check out embark/helm mappings for this...)
   ;; ("C-x B" . ivy-switch-buffer-other-window)
   :map ivy-minibuffer-map
   ;; ("TAB" . ivy-alt-done)
   ;; <cr>? C-l is nice because u alredy use jk/<cr> for invoking it (anzi, usalo per quickfix)
   ;; ("C-l" . ivy-alt-done)
   ("C-j" . ivy-next-line)
   ("C-k" . ivy-previous-line)
   ("C-l" . ivy-alt-done)
   ("C-'" . ivy-avy)
   ("C-h" . backward-delete-char-untabify)
   ("C-w" . backward-kill-word)
   :map ivy-switch-buffer-map
   ("C-k" . ivy-previous-line)
   ("C-l" . ivy-done)
   ;;("C-l" . (lambda() (ivy-done)(ivy-posframe-hide))
   ("C-d" . ivy-switch-buffer-kill)
   ("C-h" . backward-delete-char-untabify)
   ("C-w" . backward-kill-word)
   :map ivy-reverse-i-search-map
   ("C-k" . ivy-previous-line)
   ("C-d" . ivy-reverse-i-search-kill)
   ("C-h" . backward-delete-char-untabify)
   ("C-w" . backward-kill-word)
   )
  :diminish
  :custom
  (ivy-use-virtual-buffers t)
  (ivy-count-format "(%d/%d) ")
  (enable-recursive-minibuffers t)
  (ivy-wrap t) ;; doesn't work for C-v et al
  :config
  ;;  keybinding to toggle fuzzy/regex?
  ;; (setq ivy-re-builders-alist '((t . ivy--regex-fuzzy)) )
  (ivy-mode 1)
  (setq ivy-re-builders-alist '((t . orderless-ivy-re-builder)))
  (add-to-list 'ivy-highlight-functions-alist '(orderless-ivy-re-builder . orderless-ivy-highlight))
  )

(use-package all-the-icons-ivy-rich
  :after ivy-rich
  :ensure t
  :config (all-the-icons-ivy-rich-mode 1))

(use-package ivy-rich
  :after ivy
  :ensure t
  :custom
  (ivy-virtual-abbreviate 'full
        ivy-rich-switch-buffer-align-virtual-buffer t
        ivy-rich-path-style 'abbrev)
  :config
  (ivy-rich-mode 1) ;; this gets us descriptions in M-x.
  )

;; Improved Candidate Sorting
(use-package ivy-prescient
  :after counsel
  :custom
  (ivy-prescient-enable-filtering nil)
  :config
  ;; Uncomment the following line to have sorting remembered across sessions!
          ;(prescient-persist-mode 1)
  (ivy-prescient-mode 1))

(use-package orderless
  :ensure t
  :custom
  (completion-styles '(orderless flex))
  (completion-category-overrides '((file (styles basic partial-completion)))))

#+end_src

** LANGUAGE SUPPORT
Emacs has built-in programming language modes for Lisp, Scheme, DSSSL, Ada, ASM, AWK, C, C++, Fortran, Icon, IDL (CORBA), IDLWAVE, Java, Javascript, M4, Makefiles, Metafont, Modula2, Object Pascal, Objective-C, Octave, Pascal, Perl, Pike, PostScript, Prolog, Python, Ruby, Simula, SQL, Tcl, Verilog, and VHDL.  Other languages will require you to install additional modes.

#+begin_src elisp
(use-package haskell-mode :mode "\\.hs\\'")
(use-package lua-mode :mode "\\.lua\\'")
(use-package typescript-mode
  :mode "\\.ts\\'"
  :hook (typescript-mode . lsp-deferred)
  :config
  (setq typescript-indent-level 2))
(use-package vimrc-mode :mode "\\.vim\\'")

(use-package tridactyl-mode
  :ensure (:host github :repo "Fuco1/tridactyl-mode"))

;;    (with-eval-after-load 'org
;; (add-to-list 'org-src-lang-modes '("tridactylrc" . tridactyl-mode)))
#+end_src

** MODELINE
The modeline is the bottom status bar that appears in Emacs windows.  While you can create your own custom modeline, why go to the trouble when Doom Emacs already has a nice modeline package available.  For more information on what is available to configure in the Doom modeline, check out: [[https://github.com/seagle0128/doom-modeline][Doom Modeline]]

#+begin_src elisp
(use-package doom-modeline
  :ensure t
  :init
  (doom-modeline-mode 1)
  ;; change mode-line to the top (put on the left?)
  ;; (setq-default mode-line-format nil)
  ;; (setq-default header-line-format (doom-modeline-set-main-modeline))
  ;; :config
  :custom
  (doom-modeline-height 35      ;; sets modeline height
      doom-modeline-bar-width 5    ;; sets right bar width
      ;;doom-modeline-persp-name t   ;; adds perspective name to modeline
      doom-modeline-persp-icon t ;; adds folder icon next to persp name
      doom-modeline-buffer-file-name-style 'relative-to-project)
  (doom-modeline-lsp t)
  )

(use-package spacious-padding :ensure t :if (display-graphic-p) :config (spacious-padding-mode))
(display-time)

#+end_src

** ORG MODE
- [ ] https://github.com/alphapapa/org-web-tools
https://github.com/isamert/corg.el
#+begin_src elisp
;; :pin org/gnu?
(use-package org
  :ensure nil
  :bind (("C-c c" . counsel-org-capture)
   ("C-c l" . org-store-link)
   ("C-c a" . org-agenda)

   ;;   "m i" '(org-toggle-item :wk "Org toggle item")
   ;;   "m T" '(org-todo-list :wk "Org todo list")
   ;;   "m d t" '(org-time-stamp :wk "Org time stamp")
   )
  :config ;; (message "test lazy loading")

  (with-eval-after-load 'evil
    (evil-define-key 'normal org-mode-map (kbd "gj") 'evil-next-visual-line)
    (evil-define-key 'normal org-mode-map (kbd "gk") 'evil-previous-visual-line)
    (evil-define-key 'normal org-mode-map (kbd "zj") 'org-forward-heading-same-level)
    (evil-define-key 'normal org-mode-map (kbd "zk") 'org-forward-heading-same-level)
    (evil-define-key '(normal visual) org-mode-map (kbd "}") 'evil-forward-paragraph)
    (evil-define-key '(normal visual) org-mode-map (kbd "{") 'evil-backward-paragraph))
  )
#+end_src

*** Make more appealing
#+begin_src elisp
;; https://github.com/A7R7/org-popup-posframe
(setq org-ellipsis " ▼"
  org-hide-emphasis-markers t)

;; Replace list hyphen with dot
;; (font-lock-add-keywords 'org-mode
;; '(("^ *\\([-]\\) "
;;
;; (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "·"))))))

;; Ensure that anything that should be fixed-pitch in Org files appears that way
;; (set-face-attribute 'org-block nil :foreground 'unspecified :inherit 'fixed-pitch)
;; (set-face-attribute 'org-code nil   :inherit '(shadow fixed-pitch))
;; (set-face-attribute 'org-table nil   :inherit '(shadow fixed-pitch))
;; (set-face-attribute 'org-verbatim nil :inherit '(shadow fixed-pitch))
;; (set-face-attribute 'org-special-keyword nil :inherit '(font-lock-comment-face fixed-pitch))
;; (set-face-attribute 'org-meta-line nil :inherit '(font-lock-comment-face fixed-pitch))
;; (set-face-attribute 'org-checkbox nil :inherit 'fixed-pitch)
;; )

#+end_src

**** visual-fill-column
#+begin_src elisp
(defun efs/org-mode-visual-fill ()
  (setq visual-fill-column-width 100
        visual-fill-column-center-text t)
  (visual-fill-column-mode 1))

(use-package visual-fill-column
  :hook (org-mode . efs/org-mode-visual-fill))
#+end_src

*** Log

#+begin_src elisp
(setq org-agenda-start-with-log-mode t)
(setq org-log-done 'time)
(setq org-log-into-drawer t)
#+end_src

*** States

#+begin_src elisp
(setq org-todo-keywords
      '((sequence "TODO(t)" "NEXT(n)" "|" "DONE(d!)")
  (sequence "BACKLOG(b)" "PLAN(p)" "READY(r)" "ACTIVE(a)" "REVIEW(v)" "WAIT(w@/!)" "HOLD(h)" "|" "COMPLETED(c)" "CANC(k@)")))
;; #+TODO: TODO IN-PROGRESS WAITING | DONE CANCELLED
#+end_src

*** Set of commonly known tags
#+begin_src elisp
(setq org-tag-alist
      '((:startgroup)
          ; Put mutually exclusive tags here
  (:endgroup)
  ("@errand" . ?E)
  ("@home" . ?H)
  ("@work" . ?W)
  ("agenda" . ?a)
  ("planning" . ?p)
  ("publish" . ?P)
  ("batch" . ?b)
  ("note" . ?n)
  ("idea" . ?i)
  ("thinking" . ?t)
  ("recurring" . ?r)))
#+end_src

*** Refiling
#+begin_src elisp
(setq org-refile-targets
      '(("~/notes/refile.org" :maxlevel . 1)
	;; (nil :maxlevel . 1)
	))

  ;; (setq org-refile-targets '((org-agenda-files :maxlevel . 1)))

;; Save Org buffers after refiling!
(advice-add 'org-refile :after 'org-save-all-org-buffers)
;; C-c M-r wrong number of arguments?
#+end_src

*** Capture templates
#+begin_src elisp
;; start in insert mode?
;; (setq org-default-notes-file "~/notes/inbox.org")
(setq org-capture-templates
      `(("t" "Tasks / Projects")
  ("tt" "Task" entry (file+olp "~/notes/Tasks.org" "Inbox")
         "* TODO %?\n  %U\n  %a\n  %i" :empty-lines 1)
  ("ts" "Clocked Entry Subtask" entry (clock)
   "* TODO %?\n %U\n %a\n %i" :empty-lines 1)

  ("j" "Journal Entries")
  ("jj" "Journal" entry
         (file+olp+datetree "~/notes/Journal.org")
         "\n* %<%I:%M %p> - Journal :journal:\n\n%?\n\n"
         ;; ,(dw/read-file-as-string "~/Notes/Templates/Daily.org")
         :clock-in :clock-resume
         :empty-lines 1)
  ("jm" "Meeting" entry
         (file+olp+datetree "~/notes/Journal.org")
         "* %<%I:%M %p> - %a :meetings:\n\n%?\n\n"
         :clock-in :clock-resume
         :empty-lines 1)

  ("w" "Workflows")
  ("we" "Checking Email" entry (file+olp+datetree "~/notes/Journal.org")
         "* Checking Email :email:\n\n%?" :clock-in :clock-resume :empty-lines 1)

  ("m" "Metrics Capture")
  ("mw" "Weight" table-line (file+headline "~/notes/Metrics.org" "Weight")
   "| %U | %^{Weight} | %^{Notes} |" :kill-buffer t)))

#+end_src

*** Habit tracking
#+begin_src elisp

(with-eval-after-load 'org
(require 'org-habit)
(add-to-list 'org-modules 'org-habit)
(setq org-habit-graph-column 60)
)
#+end_src

*** Enabling Table of Contents
#+begin_src elisp
(use-package toc-org
  :commands toc-org-enable
  :hook (org-mode . toc-org-enable))
#+end_src

*** Yank
#+begin_src elisp
(use-package org-rich-yank
  :ensure t
  :demand t
  :bind (:map org-mode-map
              ("C-M-y" . org-rich-yank))
  :config
  (defun my-org-rich-yank-format-paste (language contents link)
    "Based on `org-rich-yank--format-paste-default'."
    (format "#+BEGIN_SRC %s\n%s\n#+END_SRC\n#+comment: %s"
            language
            (org-rich-yank--trim-nl contents)
            link))
  (customize-set-variable 'org-rich-yank-format-paste #'my-org-rich-yank-format-paste))
#+end_src

*** Org-ref
#+begin_src elisp
(use-package org-ref)
#+end_src

*** Diminish Org Indent Mode
Removes "Ind" from showing in the modeline.

#+begin_src elisp
(add-hook 'org-mode-hook 'org-indent-mode)
(eval-after-load 'org-indent '(diminish 'org-indent-mode))
#+end_src

*** Org Level Headers
#+begin_src elisp
(custom-set-faces
 '(org-level-1 ((t (:inherit outline-1 :height 1.7))))
 '(org-level-2 ((t (:inherit outline-2 :height 1.6))))
 '(org-level-3 ((t (:inherit outline-3 :height 1.5))))
 '(org-level-4 ((t (:inherit outline-4 :height 1.4))))
 '(org-level-5 ((t (:inherit outline-5 :height 1.3))))
 '(org-level-6 ((t (:inherit outline-5 :height 1.2))))
 '(org-level-7 ((t (:inherit outline-5 :height 1.1)))))
#+end_src

*** Source Code Block Tag Expansion
Org-tempo is not a separate package but a module within org that can be enabled.  Org-tempo allows for '<s' followed by TAB to expand to a begin_src tag.  Other expansions available include:

| Typing the below + TAB | Expands to ...                           |
| ---------------------- + ---------------------------------------- |
| <a                     | '#+BEGIN_EXPORT ascii' … '#+END_EXPORT   |
| <c                     | '#+BEGIN_CENTER'       … '#+END_CENTER'  |
| <C                     | '#+BEGIN_COMMENT'      … '#+END_COMMENT' |
| <e                     | '#+BEGIN_EXAMPLE'      … '#+END_EXAMPLE' |
| <E                     | '#+BEGIN_EXPORT'       … '#+END_EXPORT'  |
| <h                     | '#+BEGIN_EXPORT html'  … '#+END_EXPORT'  |
| <l                     | '#+BEGIN_EXPORT latex' … '#+END_EXPORT'  |
| <q                     | '#+BEGIN_QUOTE'        … '#+END_QUOTE'   |
| <s                     | '#+BEGIN_SRC'          … '#+END_SRC'     |
| <v                     | '#+BEGIN_VERSE'        … '#+END_VERSE'   |


I'm using the file extension here.
Automate with rg --type-list

#+begin_src vimrc :tangle no
echo map(systemlist("rg --type-list"),{_,line->{(line->split(":")[0]):substitute(line->split(":")[1:][0]->split(",")->sort({a,b->len(a)>len(b)})[0],'\W','','g')}})
#+end_src

#+begin_src elisp
(with-eval-after-load 'org
  ;; This is needed as of Org 9.2
  (require 'org-tempo)

  (add-to-list 'org-structure-template-alist '("sh"  . "src shell"))
  (add-to-list 'org-structure-template-alist '("bash"  . "src bash"))
  (add-to-list 'org-structure-template-alist '("el"  . "src elisp"))
  (add-to-list 'org-structure-template-alist '("py"  . "src python"))
  (add-to-list 'org-structure-template-alist '("pl"  . "src perl"))
  (add-to-list 'org-structure-template-alist '("lua" . "src lua"))
  (add-to-list 'org-structure-template-alist '("conf" . "src conf"))
  (add-to-list 'org-structure-template-alist '("js" . "src js")))

;; The following prevents <> from auto-pairing when electric-pair-mode is on.
;; Otherwise, org-tempo is broken when you try to <s TAB...
(add-hook 'org-mode-hook (lambda ()
         (setq-local electric-pair-inhibit-predicate
               `(lambda (c)
            (if (char-equal c ?<) t (,electric-pair-inhibit-predicate c))))))
#+end_src


*** ORG AGENDA
#+begin_src elisp
;; (setq org-directory "~/notes")
;; (setq org-agenda-files "~/notes/agenda.org")
;; (setq org-agenda-files (list org-directory))
;; (setq org-log-done 'note)
(setq org-support-shift-select t)   ;; always?
;; https://github.com/legalnonsense/elgantt

(setq org-agenda-files
      '("~/notes/Tasks.org"
  "~/notes/Habits.org"))
#+end_src

**** Configure custom agenda views
#+begin_src elisp
(setq org-agenda-custom-commands
      '(("d" "Dashboard"
   ((agenda "" ((org-deadline-warning-days 7)))
    (todo "NEXT"
    ((org-agenda-overriding-header "Next Tasks")))
    (tags-todo "agenda/ACTIVE" ((org-agenda-overriding-header "Active Projects")))))

  ("n" "Next Tasks"
   ((todo "NEXT"
    ((org-agenda-overriding-header "Next Tasks")))))

  ("W" "Work Tasks" tags-todo "+work-email")

  ;; Low-effort next actions
  ("e" tags-todo "+TODO=\"NEXT\"+Effort<15&+Effort>0"
   ((org-agenda-overriding-header "Low Effort Tasks")
    (org-agenda-max-todos 20)
    (org-agenda-files org-agenda-files)))

  ("w" "Workflow Status"
   ((todo "WAIT"
    ((org-agenda-overriding-header "Waiting on External")
     (org-agenda-files org-agenda-files)))
    (todo "REVIEW"
    ((org-agenda-overriding-header "In Review")
     (org-agenda-files org-agenda-files)))
    (todo "PLAN"
    ((org-agenda-overriding-header "In Planning")
     (org-agenda-todo-list-sublevels nil)
     (org-agenda-files org-agenda-files)))
    (todo "BACKLOG"
    ((org-agenda-overriding-header "Project Backlog")
     (org-agenda-todo-list-sublevels nil)
     (org-agenda-files org-agenda-files)))
    (todo "READY"
    ((org-agenda-overriding-header "Ready for Work")
     (org-agenda-files org-agenda-files)))
    (todo "ACTIVE"
    ((org-agenda-overriding-header "Active Projects")
     (org-agenda-files org-agenda-files)))
    (todo "COMPLETED"
    ((org-agenda-overriding-header "Completed Projects")
     (org-agenda-files org-agenda-files)))
    (todo "CANC"
    ((org-agenda-overriding-header "Cancelled Projects")
     (org-agenda-files org-agenda-files)))))))
#+end_src

*** ORG BABEL
#+begin_src elisp
(setq org-confirm-babel-evaluate nil)
;;(use-package ob-mermaid)
(with-eval-after-load 'org
  (org-babel-do-load-languages
   'org-babel-load-languages
   ;; how To make all langs true?
   '(;; other Babel languages
     (plantuml . t)
                                        ; (typst . t)
     (ditaa . t)
     (python . t)
     (gnuplot . t)
                                        ; (php . t)
     (sqlite . t)
     (perl . t)
     (octave . t)
     (calc . t)
     (lua . t)
     (C . t)
     (java . t)
     (js . t)
     ;; how does this work?
     (sed . t)
     (shell . t)
     ;;(mermaid . t)
     ;;(scheme . t)
     )))
(setq org-plantuml-jar-path (expand-file-name "/usr/share/java/plantuml/plantuml.jar"))
(setq org-ditaa-jar-path (expand-file-name "/usr/share/java/ditaa.jar"))
                                        ; (add-to-list 'org-structure-template-alist '("ditaa" . "src ditaa :file ./images/.png :cmdline -E"))
;;(setq ob-mermaid-cli-cpath "/usr/bin/mmdc")

;; Highlight Conf Files
(with-eval-after-load 'org
  (push '("conf-unix" . conf-unix) org-src-lang-modes))

#+end_src

https://extgit.isec.tugraz.at/smore/org-mode/-/blob/8fde9fc9054b370f9e8241205892d569f19fd66a/contrib/lisp/ob-php.el
**** html
#+begin_src elisp
(use-package ob-html
  :ensure (:host github :repo "misohena/ob-html")
:config
(with-eval-after-load "org"
  (require 'ob-html)
  (org-babel-html-enable-open-src-block-result-temporary)) ;;Enable C-c C-o on html code block
)
#+end_src

**** Neovim
#+begin_src elisp
(defun org-babel-execute:vimrc (body params)
  "Execute VimL BODY according to PARAMS."
  (let ((script-file (org-babel-temp-file "nvim-script-" ".vim")))
    (with-temp-file script-file
      (insert body))
    (let ((output (org-babel-eval
                   (format "nvim -V1 -es -u NONE -i NONE -c \"source %s\" -c \"quit\" 2>&1"
                           (org-babel-process-file-name script-file))
                   "")))
      ;; Remove carriage returns
      (replace-regexp-in-string "\r" "" output))))


(with-eval-after-load 'org
  (add-to-list 'org-babel-load-languages '(vimrc . t))
  (add-to-list 'org-structure-template-alist '("vim" . "src vimrc")))

(defun org-babel-execute:nlua (body params)
  "Execute Nlua BODY according to PARAMS."
  (let ((script-file (org-babel-temp-file "nvim-script-" ".lua")))
    (with-temp-file script-file
      (insert body))
    (let ((output (org-babel-eval
                   (format "nvim -V1 -es -u NONE -i NONE -c \"luafile %s\" -c \"quit\" 2>&1"
                           (org-babel-process-file-name script-file))
                   "")))
      ;; Remove carriage returns
      (replace-regexp-in-string "\r" "" output))))


(with-eval-after-load 'org
  (add-to-list 'org-babel-load-languages '(nlua . t))
  (add-to-list 'org-structure-template-alist '("nlua" . "src nlua"))
  (add-to-list 'auto-mode-alist '("\\.nlua\\'" . lua-mode))
  (add-to-list 'org-src-lang-modes '("nlua" . lua)))
#+end_src

*** Auto-tangle
#+begin_src elisp
;; Automatically tangle our dotfiles when we save them
(defun efs/org-babel-tangle-config ()
  (when (or
   (string-match-p "dots/.*[^|]\\.org\\'" (buffer-file-name))
   ;; (string-equal (concat user-emacs-directory "config.org") (buffer-file-name)))
   (string-equal (expand-file-name "~/.config/emacs/config.org") (buffer-file-name))
   (string-equal (expand-file-name "~/.config/nvim/config.org") (buffer-file-name))
)

    ;; Dynamic scoping to the rescue
    (let ((org-confirm-babel-evaluate nil))
      (org-babel-tangle))))

(add-hook 'org-mode-hook (lambda () (add-hook 'after-save-hook #'efs/org-babel-tangle-config)))

#+end_src

*** IMAGES
#+begin_src elisp
(setq org-image-actual-width '(1200))  ;; so i can use :width attribute
(setq org-startup-with-inline-images t) ;; would be nice if automatically open if over line like neovim/snacks
;; (setq org-latex-pdf-process '("tectonic %f")) ;; https://www.reddit.com/r/emacs/comments/jf9hzm/use_tectonic_in_latex_and_orgmode/
;;https://github.com/tectonic-typesetting/tectonic/discussions/928
(setq org-latex-pdf-process '("tectonic -X compile --outdir=%o -Z shell-escape -Z continue-on-errors %f"))
#+end_src


*** org-mpv-note
usa with yt-dlp
#+begin_src elisp
(use-package smartrep
  :ensure t
  :demand t)

(use-package org-mpv-notes
  :ensure t
  :commands (org-mpv-notes-mode org-mpv-notes-open)
  :hook (org-mode . org-mpv-notes-setup-link)
  :config
  (define-key org-mpv-notes-mode-map (kbd "M-n") (smartrep-map org-mpv-notes-key-bindings))
  (add-to-list 'org-mpv-notes-mpv-args "--keep-open=yes")
  )


;; https://github.com/isamert/empv.el
(use-package mpv :defer t
  :ensure t)
#+end_src

*** org-autolist
#+begin_src elisp
(use-package org-autolist :diminish :hook (org-mode . org-autolist-mode))
#+end_src

org-cheatsheet, org-reveal.js? mindmaps?

*** org modern
#+begin_src elisp
(use-package org-modern
  :hook (org-mode . org-modern-mode))
#+end_src

*** Settings
#+begin_src elisp
(setq org-edit-src-content-indentation 0) ;; Set src block automatic indent to 0 instead of 2.

(setq org-imenu-depth 3)
;; Setting RETURN key in org-mode to follow links
(setq org-return-follows-link  t)

;; Automatically update TODO statistics cookies [/] and [%]
; (setq org-hierarchical-todo-statistics nil)
; (add-hook 'org-after-todo-state-change-hook 'org-update-parent-todo-statistics)

(with-eval-after-load 'org
(add-to-list 'org-file-apps '("\\.pdf\\'" . emacs)))
#+end_src

*** org-noter
https://github.com/novoid/Memacs
https://github.com/novoid/extract_pdf_annotations_to_orgmode
https://github.com/fuxialexander/org-pdftools
#+begin_src elisp
;; (use-package djvu)			; doesn't work?
(use-package org-noter
    :ensure (:repo "org-noter/org-noter" :host github)
  :after djvu
  :custom
  ;; org-noter-highlight-selected-text to t
  (org-noter-always-create-frame nil)
(org-noter-notes-window-location 'vertical-split)
;; :init  (setq org-noter-always-create-frame nil)
 ;; (setq org-noter-notes-search-path '("~/notes"))
  :bind (:map pdf-view-mode-map
        ("C-c n" . #'org-noter))
  ;; :load-path "~/notes/pdfs/"
  ;; :ensure t
  ;;   :bind (:map evil-normal-state-map
  ;;  ("i" . #'org-noter-insert-note) ;; also works for org buffer
  ;; )
  ;; :config
  )
(with-eval-after-load 'org-noter
  (define-key org-noter-doc-mode-map (kbd "i")   'org-noter-insert-precise-note)
  (define-key org-noter-doc-mode-map (kbd "C-i") 'org-noter-insert-note)
  (define-key org-noter-doc-mode-map (kbd "I")   'org-noter-insert-precise-note-toggle-no-questions)
  (define-key org-noter-doc-mode-map (kbd "M-i") 'org-noter-insert-note-toggle-no-questions))
(with-eval-after-load 'org-noter
  (define-key org-noter-doc-mode-map (kbd "M-p") 'org-noter-sync-prev-note)
  (define-key org-noter-doc-mode-map (kbd "M-.") 'org-noter-sync-current-note)
  (define-key org-noter-doc-mode-map (kbd "M-n") 'org-noter-sync-next-note)
  (define-key org-noter-doc-mode-map (kbd "C-M-p") 'org-noter-sync-prev-page-or-chapter)
  (define-key org-noter-doc-mode-map (kbd "C-M-.") 'org-noter-sync-current-page-or-chapter)
  (define-key org-noter-doc-mode-map (kbd "C-M-n") 'org-noter-sync-next-page-or-chapter)

  (define-key org-noter-notes-mode-map (kbd "M-p") 'org-noter-sync-prev-note)
  (define-key org-noter-notes-mode-map (kbd "M-.") 'org-noter-sync-current-note)
  (define-key org-noter-notes-mode-map (kbd "M-n") 'org-noter-sync-next-note)
  (define-key org-noter-notes-mode-map (kbd "C-M-p") 'org-noter-sync-prev-page-or-chapter)
  (define-key org-noter-notes-mode-map (kbd "C-M-.") 'org-noter-sync-current-page-or-chapter)
  (define-key org-noter-notes-mode-map (kbd "C-M-n") 'org-noter-sync-next-page-or-chapter))
#+end_src

*** Unfold when ediffing
#+begin_src elisp
;; https://narkive.com/3rhdeunW:5.744.172
(defun ora-ediff-prepare-buffer ()
(when (memq major-mode '(org-mode emacs-lisp-mode))
(outline-show-all)))

(add-hook 'ediff-prepare-buffer-hook 'ora-ediff-prepare-buffer)
#+end_src

#+begin_src elisp
(use-package shrface)
#+end_src

** PDFs
[[https://github.com/vedang/pdf-tools][pdf-tools]] is a replacement of DocView for viewing PDF files inside Emacs.  It uses the =poppler= library, which also means that 'pdf-tools' can by used to modify PDFs.  I use to disable 'display-line-numbers-mode' in 'pdf-view-mode' because line numbers crash it.

fit page to window size?
invert colors?
#+begin_src elisp
(use-package pdf-tools
    ; :ensure (:repo "aikrahguzar/pdf-tools" :host github :branch "upstream-pdf-roll")
    :ensure (:repo "rahguzar/pdf-tools" :host codeberg)
  :defer t
  :commands (pdf-loader-install)
  :mode "\\.pdf\\'"
  ;; ("j" . pdf-view-next-line-or-next-page)
  ;; ("k" . pdf-view-previous-line-or-previous-page)
  ;; :general
  ;; (general-define-key :states 'motion :keymaps 'pdf-view-mode-map
  ;;                     "j" 'pdf-view-next-page
  ;;                     "k" 'pdf-view-previous-page)

  ;; (:keymaps '(pdf-view-mode-map)
  ;;           "C-j" 'pdf-view-shrink
  ;;           "C-k" 'pdf-view-enlarge)

  :init (pdf-loader-install)
  :config
  (add-to-list 'revert-without-query ".pdf")
  (general-define-key :states 'normal :keymaps 'pdf-view-mode-map
                      ;; "j" 'pdf-view-next-page
                      ;; "k" 'pdf-view-previous-page
          "C-j" 'pdf-view-shrink
          "C-k" 'pdf-view-enlarge


          "&" '(lambda()(interactive)
           (start-process
            "open-in-sioyek" nil
            "ghostty" "-e" "sioyek"
            (format "+%d" (line-number-at-pos))
            (shell-quote-argument buffer-file-name))
           ) :wk "Open in sioyek"

          )
  ;; :hook  (pdf-view-mode-hook . (lambda()
  ;;  (display-line-numbers-mode -1)
  ;;  (blink-cursor-mode -1)
  ;;  (doom-modeline-mode -1)     )
  ;; (define-key pdf-view-mode-map (kbd "C-j")#'pdf-view-shrink)
  ;; (define-key evil-normal-state-local-map (kbd "C-k")#'pdf-view-enlarge)
  )

(add-hook 'pdf-view-mode-hook #'(lambda () (interactive) (display-line-numbers-mode -1)
                                  (blink-cursor-mode -1)
                                  (doom-modeline-mode -1) ; revert when exiting?
          ; (define-key evil-normal-state-local-map (kbd "C-j")#'pdf-view-shrink)
          ;; (define-key evil-normal-state-map (kbd "C-j")#'pdf-view-shrink)
          ;; (define-key evil-normal-state-map (kbd "C-k")#'pdf-view-enlarge)
          )
    )
(add-hook 'pdf-view-mode-hook 'auto-revert-mode)

;; difference above and below hook?
;; (eval-after-load 'pdf-view '(add-hook 'pdf-view-mode-hook (lambda()define-key pdf-view-mode-map (kbd "C-j")#'pdf-view-shrink)))
;; (eval-after-load 'pdf-view '(add-hook 'pdf-view-mode-hook (lambda()define-key pdf-view-mode-map (kbd "C-k")#'pdf-view-enlarge)))
;; (with-eval-after-load 'pdf-view (evil-define-key 'normal pdf-view-mode-map (kbd "C-j")#'pdf-view-shrink))
;; (with-eval-after-load 'pdf-view (evil-define-key 'normal pdf-view-mode-map (kbd "C-k")#'pdf-view-enlarge))

;; (use-package doc-tools-toc
;;   :ensure (:host github :repo "dalanicolai/doc-tools-toc")
(use-package pdf-meta-edit
  :ensure (:host github :repo "krisbalintona/pdf-meta-edit")
  :mode "\\.pdf\\'")

(use-package doc-toc
  :mode "\\.pdf\\'")
#+end_src

** EPUBs
#+begin_src elisp
 (use-package nov
    :mode ("\\.epub\\'" . nov-mode)
    :custom (nov-text-width 75))
#+end_src

** RAINBOW DELIMITERS
Adding rainbow coloring to parentheses.

#+begin_src elisp
(use-package rainbow-delimiters
  ;; :hook ((emacs-lisp-mode . rainbow-delimiters-mode)
  ;;        (clojure-mode . rainbow-delimiters-mode)))
  :hook (prog-mode . rainbow-delimiters-mode))

#+end_src

** RAINBOW MODE
Display the actual color as a background for any hex color value (ex. #ffffff).  The code block below enables rainbow-mode in all programming modes (prog-mode) as well as org-mode, which is why rainbow works in this document.

#+begin_src elisp
(use-package rainbow-mode
  :diminish
  :hook org-mode prog-mode)
#+end_src

** SUBWORD MODE
use ij/aj for this?
#+begin_src elisp
(add-hook 'prog-mode-hook #'subword-mode)
#+end_src

** SHELLS AND TERMINALS
In my configs, all of my shells (bash, fish, zsh and the ESHELL) require my shell-color-scripts-git package to be installed.  On Arch Linux, you can install it from the AUR.  Otherwise, go to my shell-color-scripts repository on GitLab to get it.

*** Enhancements
#+begin_src elisp
(use-package kkp
  :ensure t
  :config
  ;; (setq kkp-alt-modifier 'alt) ;; use this if you want to map the Alt keyboard modifier to Alt in Emacs (and not to Meta)
  (global-kkp-mode +1))
#+end_src

*** Eshell
Eshell is an Emacs 'shell' that is written in Elisp.

#+begin_src elisp
(use-package eshell-syntax-highlighting
  :after esh-mode
  :config
  (eshell-syntax-highlighting-global-mode +1))

;; eshell-syntax-highlighting -- adds fish/zsh-like syntax highlighting.
;; eshell-rc-script -- your profile for eshell; like a bashrc for eshell.
;; eshell-aliases-file -- sets an aliases file for the eshell.

(setq eshell-rc-script (concat user-emacs-directory "eshell/profile")
      eshell-aliases-file (concat user-emacs-directory "eshell/aliases")
      eshell-history-size 5000
      eshell-buffer-maximum-lines 5000
      eshell-hist-ignoredups t
      eshell-scroll-to-bottom-on-input t
      eshell-destroy-buffer-when-process-dies t
      eshell-visual-commands'("bash" "fish" "htop" "ssh" "top" "zsh"))
#+end_src

*** Vterm
Vterm is a terminal emulator within Emacs.  The 'shell-file-name' setting sets the shell to be used in M-x shell, M-x term, M-x ansi-term and M-x vterm.  By default, the shell is set to 'fish' but could change it to 'bash' or 'zsh' if you prefer.

#+begin_src elisp
(use-package vterm
  :config
  (setq shell-file-name "/bin/sh"
  vterm-max-scrollback 5000)

(general-define-key
 :states 'normal
 "SPC RET" (lambda ()
             (interactive)
             (split-window-right)
             (other-window 1)
             (vterm)
	     ;; (vterm-other-window)
  
  ))
;; FIX:
(general-define-key
 :states 'normal
 "SPC S-RET" (lambda ()
             (interactive)
             (split-window-below)
             (other-window 1)
             (vterm)
	     ;; (vterm-other-window)
  
  )))
#+end_src

#+begin_src elisp

;;  (with-eval-after-load 'evil
;; (evil-define-key 'normal vterm-mode-map (kbd "<escape>") 'vterm--self-insert))
;; (add-to-list 'display-buffer-alist
;;             '((lambda (buffer-or-name _)
;;                 (let ((buffer (get-buffer buffer-or-name)))
;;                   (with-current-buffer buffer
;;                     (or (equal major-mode 'vterm-mode)
;;                         (string-prefix-p vterm-buffer-name (buffer-name buffer))))))
;;               (display-buffer-reuse-window display-buffer-at-bottom)
;;               ;;(display-buffer-reuse-window display-buffer-in-direction)
;;               ;;display-buffer-in-direction/direction/dedicated is added in emacs27
;;               ;; (direction . right)
;;               ;;(dedicated . t) ;dedicated is supported in emacs27
;;               (reusable-frames . visible)
;;               (window-height . 0.4)))
#+end_src

** SUDO EDIT
[[https://github.com/nflath/sudo-edit][sudo-edit]] gives us the ability to open files with sudo privileges or switch over to editing with sudo privileges if we initially opened the file without such privileges.

#+begin_src elisp
(use-package sudo-edit)
;; '(sudo-edit-find-file :wk "Sudo find file")
;; '(sudo-edit :wk "Sudo edit file"))
#+end_src

** THEME
The first line below designates the directory where will place all of our custom-made themes, which I have created only one (dtmacs).  You can create your own Emacs themes with the help of the [[https://emacsfodder.github.io/emacs-theme-editor/][Emacs Theme Editor]].  I am also installing =doom-themes= because it contains a huge collection of themes.  M-x load-theme will list all of the themes available.

#+begin_src elisp
;; (add-to-list 'custom-theme-load-path "~/.config/emacs/themes/")

;; (use-package ef-themes :ensure t :config(ef-themes-select 'ef-cyprus))
; (use-package ef-themes :ensure t :config(ef-themes-select 'ef-summer))
(use-package ef-themes :ensure t :config(ef-themes-select 'ef-dream))
#+end_src

** TLDR

#+begin_src elisp
(use-package tldr :commands tldr)
#+end_src

** WHICH-KEY
TODO: put popup in the middle?
how to copy or put everything in the popup in a buffer?
#+begin_src elisp
(use-package which-key
    :defer 0
  :diminish
  :config
  (setq which-key-side-window-location 'top
  which-key-sort-order #'which-key-key-order-alpha
  which-key-allow-imprecise-window-fit nil
  which-key-sort-uppercase-first nil
  which-key-add-column-padding 1
  which-key-max-display-columns nil
  which-key-min-display-lines 6
  which-key-side-window-slot -10
  which-key-side-window-max-height 0.33
  which-key-idle-delay 0.8
  which-key-max-description-length 25
  which-key-allow-imprecise-window-fit nil
  which-key-separator " → " )
  (which-key-mode)
    )
;; height? how to align?
(use-package which-key-posframe
  :custom (which-key-posframe-parameters '((border-width . 2)
                                           (internal-border-width . 1)))
  ;; (left-fringe . 20)
  :after which-key
  :diminish t
  :ensure t
  :config (which-key-posframe-mode)
  (setq which-key-posframe-poshandler 'posframe-poshandler-frame-center)
  )
#+end_src

** COMMAND-LOG
keycast
#+begin_src elisp
(use-package command-log-mode
    :commands command-log-mode)
#+end_src

** TODO [#B] KANATA SHEGANIGANS
#+begin_src elisp
(use-package kanata-kbd-mode
  :ensure (:host github :repo "chmouel/kanata-kbd-mode")
  :mode ("\\.kbd\\'" . kanata-kbd-mode))


(with-eval-after-load 'org
  (add-to-list 'org-src-lang-modes '("kbd" . kanata-kbd)))
;; would be cool (add-to-list 'org-babel-load-languages '(kanata . t))

;; now get rid of c-x and c-c in normal mode?
;; (define-key key-translation-map (kbd "<Launch6>") (kbd "C-x"))
;; (define-key key-translation-map (kbd "<clt-x>") (kbd "C-x"))
;; (define-key global-map (kbd "<clt-x>") ctl-x-map)
;; now i can use C-x behaviour in normal mode!
;; press f12 to show which-key i guess, u cannot do the same with modifiers or f13-f24 since they're not on the kbd
;; TODO: make c-c c-x work
(define-key key-translation-map (kbd "<f12>") [ctl-x]) ; hide translation in help files? don't really care
(define-key global-map [ctl-x] ctl-x-map)
;; (define-key key-translation-map (kbd "<Launch5>") [snacks])
(global-set-key [f15]
  (lambda ()
    (interactive)
    (setq unread-command-events (listify-key-sequence "\C-c"))))

;; (define-key key-translation-map (kbd "<Launch5>") (lambda()(interactive)(universal-argument 0))) ;; doesn't even work
;; (define-key key-translation-map (kbd "<Launch5>") (kbd "M-0")) ;; basically u can use 0 for v:count now

;; delta side by side?
;; (define-key key-translation-map (kbd "<Launch5>") vc-prefix-map)


;; TODO: hide translated from...
;;(define-key key-translation-map (kbd "<Launch5>") (kbd "C-c"))
;; can i make so it send the original C-h?
;;(define-key key-translation-map (kbd "<Launch7>") (kbd "C-h"))
;;(keymap-global-set "<Launch5>" ctl-x-map)
#+end_src

** NOICE                                                                 :vim:
toggle full screen binding?
#+begin_src elisp
;;(use-package mini-frame
;;:init (mini-frame-mode)
;;)
;; at cursor in insert mode and at center in normal mode
;; can't see last line though
(use-package ivy-posframe
  :ensure t
  :after ivy
  :config
  (setq ivy-posframe-display-functions-alist '((t . ivy-posframe-display-at-window-center)))
  ;; (setq ivy-posframe-height 70)
  (defun my-ivy-posframe-get-size ()
    "Set the ivy-posframe size according to the current frame."
    (let ((height (+ 3(or ivy-posframe-height (or ivy-height 20))))
          (width (min (or ivy-posframe-width 200) (round (* .75 (frame-width))))))
      (list :height height :width width :min-height height :min-width width)))

  (setq ivy-posframe-size-function 'my-ivy-posframe-get-size)
  (ivy-posframe-mode 1))
#+end_src

** HELPFUL
#+begin_src elisp
(use-package helpful
  :commands (helpful-callable helpful-variable helpful-command helpful-key)
  :custom
  (counsel-describe-function-function #'helpful-callable)
  (counsel-describe-variable-function #'helpful-variable)
  :bind
  ([remap describe-function] . counsel-describe-function)
  ([remap describe-command] . helpful-command)
  ([remap describe-variable] . counsel-describe-variable)
  ([remap describe-key] . helpful-key))

#+end_src

** HYDRA
#+begin_src elisp
;; (use-package hydra :defer t)
;; (defhydra hydra-text-scale (:timeout 4)
;; "scale text"
;; ("j" text-scale-increase "in")
;; ("k" text-scale-decrease "out")
;; ("f" nil "finished" :exit t))

;; (rune/leader-keys
;; "ts" '(hydra-text-scale/body :which-key "scale text"))
#+end_src

** LISPY
#+begin_src elisp
;; (use-package lispy)
;; (use-package evil-lispy
;;   :ensure t
;;   :hook ((emacs-lisp-mode clojure-mode) . evil-lispy-mode))
;; (use-package lispyville
;;   :init
;;   (general-add-hook '(emacs-lisp-mode-hook lisp-mode-hook) #'lispyville-mode)
;;   :config
;;   (lispyville-set-key-theme '(operators c-w additional)))
#+end_src

** ERC
#+begin_src elisp
(setq erc-prompt(lambda()(concat"["(buffer-name)"]"))
      erc-server "irc.libera.chat")
;; hide IP?
#+end_src

** QUIZ
key-quiz-use-mode
#+begin_src elisp
(use-package key-quiz :commands key-quiz)
#+end_src

** THEMES

doesn't work!
https://www.reddit.com/r/emacs/comments/1kr94v4/automagic_dark_mode_automatically_create_a_dark/
#+begin_src elisp
;;(use-package auto-dark
;;  :ensure t
;;  :custom
;;  (auto-dark-themes '((doom-feather-light) (doom-feather-dark)))
;;  :hook
;;  (auto-dark-dark-mode
;;   . (lambda ()
;;        (automagic-dark-mode t)    ;; HERE
;;        ))
;;  (auto-dark-light-mode
;;   . (lambda ()
;;        (automagic-dark-mode nil)  ;; and HERE
;;        ))
;;  :init (setq custom-safe-themes t)(auto-dark-mode))
#+end_src

** DOCS
#+begin_src elisp
(use-package devdocs
  :bind (("C-h D" . devdocs-lookup))
  )
#+end_src

** anki editor
 org-queue 
#+begin_src elisp
(use-package org-srs
:ensure (:host github :repo "bohonghuang/org-srs")
  :hook (org-mode . org-srs-embed-overlay-mode)
  :bind (:map org-mode-map
         ("<f5>" . org-srs-review-rate-easy)
         ("<f6>" . org-srs-review-rate-good)
         ("<f7>" . org-srs-review-rate-hard)
         ("<f8>" . org-srs-review-rate-again)))
#+end_src
** notes?
 css: #+setupfile: https://fniessen.github.io/org-html-themes/org/theme-readtheorg.setup
https://github.com/chenyanming/paw?tab=readme-ov-file
** TODO Radio
integrate w/ emms?
#+begin_src elisp
(use-package eradio
  :init
  (setq eradio-player '("mpv" "--no-video" "--no-terminal"))
  :bind

  ("C-c r" . eradio-toggle)
  :config
  (setq eradio-channels '(
        ("7soul - soma fm" . "https://somafm.com/7soul.pls")
        ("beatblender - soma fm" . "https://somafm.com/beatblender.pls")
        ("bootliquor - soma fm" . "https://somafm.com/bootliquor.pls")
        ("bossa - soma fm" . "https://somafm.com/bossa.pls")
        ("brfm - soma fm" . "https://somafm.com/brfm.pls")
        ("chillits - soma fm" . "https://somafm.com/chillits.pls")
        ("cliqhop - soma fm" . "https://somafm.com/cliqhop.pls")
        ("covers - soma fm" . "https://somafm.com/covers.pls")
        ("darkzone - soma fm" . "https://somafm.com/darkzone.pls")
        ("deepspaceone - soma fm" . "https://somafm.com/deepspaceone.pls")
        ("defcon - soma fm" . "https://somafm.com/defcon.pls")
        ("digitalis - soma fm" . "https://somafm.com/digitalis.pls")
        ("doomed - soma fm" . "https://somafm.com/doomed.pls")
        ("dronezone - soma fm" . "https://somafm.com/dronezone.pls")
        ("dubstep - soma fm" . "https://somafm.com/dubstep.pls")
        ("fluid - soma fm" . "https://somafm.com/fluid.pls")
        ("folkfwd - soma fm" . "https://somafm.com/folkfwd.pls")
        ("groovesalad - soma fm" . "https://somafm.com/groovesalad.pls")
        ("gsclassic - soma fm" . "https://somafm.com/gsclassic.pls")
        ("illstreet - soma fm" . "https://somafm.com/illstreet.pls")
        ("indiepop - soma fm" . "https://somafm.com/indiepop.pls")
        ("insound - soma fm" . "https://somafm.com/insound.pls")
        ("live - soma fm" . "https://somafm.com/live.pls")
        ("lush - soma fm" . "https://somafm.com/lush.pls")
        ("metal - soma fm" . "https://somafm.com/metal.pls")
        ("missioncontrol - soma fm" . "https://somafm.com/missioncontrol.pls")
        ("n5md - soma fm" . "https://somafm.com/n5md.pls")
        ("poptron - soma fm" . "https://somafm.com/poptron.pls")
        ("reggae - soma fm" . "https://somafm.com/reggae.pls")
        ("scanner - soma fm" . "https://somafm.com/scanner.pls")
        ("secretagent - soma fm" . "https://somafm.com/secretagent.pls")
        ("seventies - soma fm" . "https://somafm.com/seventies.pls")
        ("sf1033 - soma fm" . "https://somafm.com/sf1033.pls")
        ("sfinsf - soma fm" . "https://somafm.com/sfinsf.pls")
        ("sonicuniverse - soma fm" . "https://somafm.com/sonicuniverse.pls")
        ("spacestation - soma fm" . "https://somafm.com/spacestation.pls")
        ("specials - soma fm" . "https://somafm.com/specials.pls")
        ("suburbsofgoa - soma fm" . "https://somafm.com/suburbsofgoa.pls")
        ("synphaera - soma fm" . "https://somafm.com/synphaera.pls")
        ("thetrip - soma fm" . "https://somafm.com/thetrip.pls")
        ("thistle - soma fm" . "https://somafm.com/thistle.pls")
        ("tikitime - soma fm" . "https://somafm.com/tikitime.pls")
        ("u80s - soma fm" . "https://somafm.com/u80s.pls")
        ("vaporwaves - soma fm" . "https://somafm.com/vaporwaves.pls")

        )))
;; ("cyberia - lainon"  . "https://lainon.life/radio/cyberia.ogg.m3u") ;; cyberpunk-esque electronica
;; ("cafe - lainon"     . "https://lainon.life/radio/cafe.ogg.m3u")))  ;; boring ambient, but with lain
#+end_src

** info
disable vim keys in info-mode except j and k?
#+begin_src elisp
(use-package info-colors
  :hook (Info-selection . info-colors-fontify-node)
  )
#+end_src

** docker
https://github.com/abrochard/kubel
#+begin_src elisp
(use-package docker
  :ensure t
  :bind ("C-c d" . docker)
  )
#+end_src

** AI
use general leader keymaps
*** LLM
**** GPTEL
https://github.com/karthink/gptel/issues/165
#+begin_src elisp
(use-package gptel ;; :bind ("C-c RET" . 'gptel)
  :bind (
   ;; C-c and f15 two different prefixes 😁
   ;; ("C-c A" . 'gptel)
   ("C-c s" . 'gptel-send)
   :map gptel-mode-map
   ("<RET>" . 'gptel-send)
   ("C-g" . 'gptel-abort)
   )

  ;; :bind (:map gptel-mode-map
  ;;        ("C-c t" . gptel-insert-template)
  ;;        ("C-c s" . gptel-send)
  ;;        ("C-c m" . gptel-toggle-model)
  ;;        ("C-c r" . gptel-retry))
  ;; :bind-keymap ("C-c g" . gptel-prefix-map))

  ;; Basic settings
  :custom
  ;; gptel-api-key (auth-source-pass-get 'secret "openai/api-key")
  (gptel-default-mode #'org-mode)
  ;; (setq gptel-model 'gemma3:12b
  ;; (gptel-model 'claude-3.7-sonnet)
  (gptel-model 'gpt-4.1)



  ;; gptel-max-tokens 4096)
  ;; Custom UI enhancements
  ;; (gptel-display-buffer-action
  ;;  '((display-buffer-in-side-window)
  ;;    (side . right)
  ;;    (window-width . 0.4)))
  ;; Prompt templates for different tasks
  ;; (gptel-prompt-templates
  ;;       '(("code-review" . "Review this code for bugs, improvements, and best practices:\n\n=\n{{text}}\n=")
  ;;         ("explain" . "Explain the following concept in simple terms:\n\n{{text}}")
  ;;         ("translate" . "Translate this text to {{language}}:\n\n{{text}}")
  ;;         ("improve" . "Improve this text for clarity and conciseness:\n\n{{text}}")))

  :config
  (setq gptel-backend (gptel-make-gh-copilot "Copilot")) ;; BUG: non funge in :custom
  ;; (gptel-make-ollama "Ollama" :host "localhost:11434" :stream t :models '(gemma3:12b))

  (add-hook 'gptel-post-stream-hook 'gptel-auto-scroll)
  (add-hook 'gptel-post-response-functions 'gptel-end-of-response)

#+end_src

***** Presets
#+begin_src elisp
(gptel-make-preset 'explain
  :system "Explain what this code does to a novice programmer.")
#+end_src

***** Tools
#+begin_src elisp
;;
#+end_src

#+begin_src elisp
;; :config
;; Quick template application
          ; (defun gptel-insert-template (template-key)
          ;   (interactive (list (completing-read "Template: " (mapcar #'car gptel-prompt-templates))))
          ;   (let ((template (cdr (assoc template-key gptel-prompt-templates))))
          ;     (when template
          ;       (let ((text (if (region-active-p)
          ;                       (buffer-substring-no-properties (region-beginning) (region-end))
          ;                     ""))
          ;             (language (when (string= template-key "translate")
          ;                         (read-string "Target language: "))))
          ;         (gptel (replace-regexp-in-string "{{text}}" text
          ;                  (replace-regexp-in-string "{{language}}" (or language "") template)))))))

;; Auto-save conversations
;; 1 file=1 session?
;; append answer?
;; (defun gptel-auto-save (&rest _args)
;;   (when gptel-mode
;;     (let ((dir "~/.config/emacs/gptel-conversations/"))
;;       (unless (file-exists-p dir) (make-directory dir t))
;;       (write-file (format "%s%s.org" dir (format-time-string "%Y%m%d-%H%M%S"))))))

;; (add-hook 'gptel-post-response-functions 'gptel-auto-save)

)
#+end_src

***** Functions
#+begin_src elisp
;; how to rewrite in place?
(defun gptel-pinyin-to-chinese ()
  (interactive)
  (message "Convert pinyin to Chinese...")
  (gptel-request
      (format "把下面拼音转换成中文， 只输出内容， 不要解释：\n %s"
              (if (region-active-p)
                  (buffer-substring-no-properties (mark) (point))
                (substring-no-properties (buffer-string)))
              :system "你是一个语言学家， 精通英文和汉语")))

(defun gptel-vim2elisp ()
  (interactive)
  (message "Converting Vimscript to Elisp...")
  (gptel-request
      (format "Convert the following vimscript to elisp, without explanations: \n %s"
              (if (region-active-p)
                  (buffer-substring-no-properties (mark) (point))
                (substring-no-properties (buffer-string)))
              :system "You are an expert user of both Emacs and Vim (not Neovim)")
:in-place t :stream t
    ))
#+end_src

***** Quick
#+begin_src elisp
(use-package posframe :ensure (:host github :repo "tumashu/posframe"))
(use-package gptel-quick
:ensure (:host github :repo "karthink/gptel-quick")
:bind (("C-c q"  . gptel-quick)
))

(defun gptel-quick-translate ()
    "Check the region or thing at point with an LLM.

QUERY-TEXT is the text being explained.  COUNT is the approximate
word count of the response."
    (interactive)
    (let ((gptel-quick-system-message
           (lambda (count)
             (format "Translate to english. No explanations" count))))
      (call-interactively #'gptel-quick)))

(define-key global-map (kbd "C-c t") 'gptel-quick-translate)
#+end_src

*** MCP
*** ECA
#+begin_src elisp
(use-package eca :ensure(:host github :repo "editor-code-assistant/eca-emacs")
  :config
    (evil-define-key 'normal eca-chat-map (kbd "<return>") 'eca-chat--key-pressed-return)
  )
#+end_src
** EOF

#+begin_src elisp
;; (use-package vi-tilde-fringe-mode)
#+end_src

** [#A] LSP
#+begin_src elisp
(defun efs/lsp-mode-setup ()
  (setq lsp-headerline-breadcrumb-segments '(path-up-to-project file symbols))
  (lsp-headerline-breadcrumb-mode))

(use-package lsp-mode
  :commands (lsp lsp-deferred)
  :hook (lsp-mode . efs/lsp-mode-setup)
  :init
  (setq lsp-keymap-prefix "C-c l")  ;; Or 'C-l', 's-l'
  :config
  (lsp-enable-which-key-integration t))

(use-package lsp-ui
  :hook (lsp-mode . lsp-ui-mode)
  :custom
  (lsp-ui-doc-position 'bottom))

;;(use-package lsp-treemacs
;;:after (lsp treemacs)
;;:config
;;(lsp-treemacs-sync-mode 1))

(use-package lsp-ivy)

#+end_src

** Tree-sitter
*** Text-objects
Wait a few months
#+begin_src elisp :tangle no
(use-package evil-textobj-tree-sitter :ensure t
  :after evil
  :config
  ;; bind `function.outer`(entire function block) to `f` for use in things like `vaf`, `yaf`
  (define-key evil-outer-text-objects-map "f" (evil-textobj-tree-sitter-get-textobj "function.outer"))
  (define-key evil-inner-text-objects-map "f" (evil-textobj-tree-sitter-get-textobj "function.inner"))
  (define-key evil-outer-text-objects-map "a" (evil-textobj-tree-sitter-get-textobj ("conditional.outer" "loop.outer")))
  )
#+end_src

,#+begin_src elisp
; (use-package treemacs
;       :after hydra
;   :ensure t
;   :bind
;   (:map global-map
;         ("M-0"       . treemacs-select-window)
;         ("C-x t 1"   . treemacs-delete-other-windows)
;         ("C-x t t"   . treemacs)
;         ("C-x t B"   . treemacs-bookmark)
;         ("C-x t C-t" . treemacs-find-file)
;         ("C-x t M-t" . treemacs-find-tag)))
,#+end_src

** Socials
https://github.com/alphapapa/ement.el
#+begin_src elisp
(use-package reddigg
  :commands reddigg-view-sub
  :config
  (setq org-confirm-elisp-link-function nil)
  )
#+end_src

** Snippets
https://www.youtube.com/watch?v=W-bRZlseNm0
#+begin_src elisp
(use-package yasnippet-snippets
  ;; :disabled
  :ensure t)

(use-package yasnippet
  :config
  (setq yas-snippet-dirs '("~/.config/emacs/snippets"))
  (yas-global-mode 1))
#+end_src

** Password management

https://github.com/ecraven/ivy-pass

** Music
#+begin_src elisp
;; Emacs Multimedia System
;; tags?
(use-package emms
  :diminish
  :custom
  (emms-browser-covers #'emms-browser-cache-thumbnail-async)
  (emms-source-file-default-directory "~/Music") ; hide dir in browser?

  (emms-player-mpv-ipc-socket "/tmp/mpvsocket")
  :bind
  (
   ;; ("C-c w m p" . emms-play-playlist )
   ;; ("<XF86AudioPrev>" . emms-previous)
   ;; ("<XF86AudioNext>" . emms-next)
   ;; ("<XF86AudioPlay>" . emms-pause)
   ("C-c m" . emms)
   ;;   ("s-m" . emms)       same binding as WM/hyprland?


   )
  :config
  (require 'emms-setup)
  (require 'emms-mpris)
  (emms-all)
  (emms-default-players)
  (emms-mpris-enable)
  ;; TODO: delete eradio now
  ;; (define-sequence 'personal-music-map "\C-c r" 'emms-play-streamlist
  ;;   '(("a" "http://stereoscenic.com/pls/pill-hi-mp3.pls") ;; Ambient
  ;;     ("t" "http://www.1.fm/tunein/trance64k.pls")        ;; Trance
  ;;     ("j" "http://thejazzgroove.com/itunes.pls")))       ;; Jazz

  (with-eval-after-load 'evil-collection
    (evil-collection-define-key 'normal 'emms-playlist-mode-map
      "l" 'emms-playlist-mode-play-smart))
  ;;also seek if playing

  (emms-insert-directory "~/Music")
  ;; (add-to-list 'emms-player-mpv-parameters "--input-ipc-server=/tmp/mpvsocket")
  )

#+end_src

** STT
#+begin_src elisp
; (use-package whisper
  ;; :bind ("C-H-r" . whisper-run)
; :custom
  ; (whisper-model "small"))
#+end_src

** Info
#+begin_src elisp
(use-package info-variable-pitch
  :ensure (:host github :repo "kisaragi-hiu/info-variable-pitch")
  :hook (Info-mode . info-variable-pitch-mode))
#+end_src

** Translation
#+begin_src elisp
(use-package immersive-translate
  :ensure t
  :custom (immersive-translate-backend 'trans)
  (immersive-translate-trans-target-language "hi")
)
#+end_src

** Pages
#+begin_src elisp
(use-package page-break-lines)
#+end_src

** symex
#+begin_src elisp
; (use-package symex
;  :after evil
;   :config
;   (symex-initialize)
;   (evil-define-key 'normal 'global (kbd "<leader>;") 'symex-mode-interface))
#+end_src

** Prism
#+begin_src elisp
(use-package prism
  :ensure (:host github :repo "alphapapa/prism.el"))
#+end_src

** Gnuplot
#+begin_src elisp
(use-package gnuplot)
#+end_src

#+begin_src elisp
(use-package eros
  :ensure (:host github :repo "xiongtx/eros")
  :init (eros-mode 1)
  )
#+end_src

** Gists
,#+begin_src elisp
(use-package ox-gist)
,#+end_src
